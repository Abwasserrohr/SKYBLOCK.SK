#
# > Command - /islandadmin 
# > Actions:
# > This command contains multible of actions which are meant to be used by an administrator for
# > administration and moderation purposes.
command /islandadmin [<text>] [<text>] [<text>] [<text>] [<text>]:
  permission: is.admin
  aliases: /isadmin
  trigger:
    #
    # > Set prefix for messages
    set {_prefix} to {SB::lang::prefix::%{SK::lang::%uuid of player%}%}
    #
    # > Argument: "go" ("home" OR "tp")
    # > Teleports the user to the defined player
    # > Actions:
    # > Teleports the player to the defined player island
    if arg-1 is "go" OR "home" OR "tp":
      set {_player} to arg-2 parsed as offline player
      set {_uuid} to uuid of {_player}
      homehandler({_player},"home",arg-3,player)
      stop
    #
    # > If something should be done with an island, this is the code:
    else if arg-1 is "island":
      #
      # > Argument: "calc"
      # > If the user types in /islandadmin island calc, the island level gets calculated
      # > Actions:
      # > Checks if the defined user has a island and then run the calcisland function.
      if arg-2 is "calc":
        set {_player} to arg-3 parsed as offline player
        set {_uuid} to uuid of {_player}
        if {SB::player::%{_uuid}%::island::bedrock} is set:
          message "%{_prefix}% %{SB::lang::isadmin::fcalc::%{SK::lang::%uuid of player%}%}%"
          $ thread
          calcisland({_player})

      #
      # > Argument: "purge"
      # > If the user types in /islandadmin island purge <number>, islands, which have been inactive for the defined
      # > number of days are going to be deleted. This is dangerous and a backup should be made prior entering this.
      # > Actions:
      # > Deleted all islands which have been inactive for more than x days.
      if arg-2 is "purge":
        if arg-3 is not set:
          stop
        #
        # > Calls purgeislands function, this shortens the size of this file.
        purgeislands(player,arg-3,arg-4)
        
      if arg-2 is "delete":
        #
        # > Calls the admintool-deleteisland function, which is going to handle island deletation by admins.
        admintools_deleteisland(player,arg-3,arg-4)

      #
      # > Argument: "addmember"
      # > If the user types in /islandadmin island addmember <player>, the defined player is added to the island.
      # > Actions:
      # > Adds the player to the island the executor is standing on.
      if arg-2 is "addmember":
        admintools_addmember(player,arg-3)
        
      #
      # > Argument: "kickall"
      # > If the user types in /islandadmin island kickall, all players of the current island are kicked.
      # > Actions:
      # > Kicks everyone on the island the player is currently at without deleting it using the admintools_kickall function.
      if arg-2 is "kickall":
        admintools_kickall(player,arg-3,arg-4)

      #
      # > Argument: "changebiome"
      # > If the user types in /islandadmin island changebiome <biome>, the biome of the current island is changed.
      # > Optional: Define the owner of the island to take it instead of the current island.
      # > Actions:
      # > Changes the biome of the island the user is standing on or the defined 4nd argument.
      if arg-2 is "changebiome":
        admintools_changebiome(player,arg-3,arg-4)
  
      #
      # > Argument: "changeleader"
      # > If the user types in /islandadmin island changeleader <new leader>, the leader is changed to this player on which the admin
      # > is currently standing on, works only, if there is already a leader and a member in the island.
      # > Actions:
      # > Changes the leader using the admintools_changeleader function.
      if arg-2 is "changeleader":
        admintools_changeleader(player,arg-3,arg-4,arg-5)

      #
      # > Argument: "invite"
      # > Invites a player for the owner of the island
      # > Actions:
      # > This is going to invite a player, like it would have been done by the owner directly.
      # > Use addmember to add a member without asking the user.
      if arg-2 is "invite":
        admintools_invite(player,arg-3,arg-4)

      #
      # > Argument: "create"
      # > Invites a player for the owner of the island
      # > Actions:
      # > This argument calls the admintools_create function, which creates a new island at the location
      # > of the player, if available.
      if arg-2 is "create":
        admintools_create(player)

    #
    # > If no argument has been used, tell the player what is possible:
    else:
      message "/isadmin island invite <Owner> <New Player> - Invite player to the island"
      message "/isadmin island changeleader <New Owner> - Change the leader of the island on which you're standing to the new owner (has to be a member)"
      message "/isadmin island changebiome <new biome> [<Owner>] - Changes the biome for the island you're standing on or the defined owner"
      message "/isadmin island kickall - kicks everyone from the island you're standing on"
      message "/isadmin island delete <player> - Deletes the island of the player"
      message "/isadmin island addmember <player> - adds the defined player to the island you're currently at, if no leader is set, the player gets the leader"
      message "/isadmin island calc <player> - calculates the island of the defined player"
  
command /island [<text>] [<text=1>] [<text>]:
  aliases: /is, /sb, /skyblock
  trigger:
    #
    # > Set some frequently used variables.
    set {_prefix} to {SB::lang::prefix::%{SK::lang::%uuid of player%}%}
    #
    # > If the player has no argument set, open the skyblock menu.
    if arg-1 is not set:
      skyblockgui(player)
    #
    # > Argument "reload"
    # > Actions:
    # > If the player has the admin permission, make the player execute the
    # > skript reload command for the SkyBlock folder.
    if arg-1 is "reload":
      if player has permission "%{SB::config::buildpermission}%":
        reloadskyblocksk(1)
        message "%{_prefix}% &7Sucessfully reloaded SKYBLOCK.SK"
    #
    # > Argument "create"
    # > Actions:
    # > Creates a island for the player or opens the island selection menu, if
    # > the player has not already choosen a specific island.
    if arg-1 is "create":
      createisland(player,arg-2)
    #
    # > Argument "flag" ("flags")
    # > Actions:
    # > Opens the flag menu using the openflagmenu function.
    else if arg-1 is "flag" or "flags":
      openflagmenu(player,"")
    #
    # > Argument: "home"
    # > Actions:
    # > If the player wants to set, delete or teleport to a home, the homehandler is called here.
    # > Example command /island home [<player>] [<name>]
    # > Example command /island sethome [<name>]
    # > Example command /island delhome [<name>]
    else if arg-1 is "home" or "sethome" or "delhome":
      #
      # > If the player has set a third argument, try to teleport to the home of
      # > the specified player.
      if arg-1 is "home":
        if arg-3 is set:
          set {_p} to arg-2 parsed as offline player
          homehandler({_p},arg-1,arg-3,player)
          stop
      #
      # > If the player has not set a third argument, just try to teleport.
      homehandler(player,arg-1,arg-2,player)
    #
    # > Argument: "go"
    # > Actions:
    # > Teleports the player to the bedrock of the island.
    else if arg-1 is "go":
      if {SB::player::%uuid of player%::island::bedrock} is not set:
        message "%{_prefix}% %{SB::lang::nois::%{SK::lang::%uuid of player%}%}%"
      else:
        set {_loc} to {SB::player::%uuid of player%::island::bedrock}
        add 1 to y-coordinate of {_loc}
        teleport player to {_loc}
        message "%{_prefix}% %{SB::lang::tpis::%{SK::lang::%uuid of player%}%}%"
    #
    # > Argument: "delete" or "remove"
    # > Actions:
    # > Deletes the island of the player. Also asks, if the player really wants to delete the island.
    else if arg-1 are "delete" or "remove":
    #
    # > Only call deleteisland function, if player has an island and confirmed the deletation
    # > of the island.
      if {SB::player::%uuid of player%::island::bedrock} is not set:
        message "%{_prefix}% %{SB::lang::cantleave::%{SK::lang::%uuid of player%}%}%"
      else:
        if arg-2 is "2":
          set {_uuid} to uuid of player
          set {_loc} to {SB::player::%{_uuid}%::island::bedrock}
          set {_bedrockloc} to "%x-coord of {_bedrockloc}%_%y-coord of {_bedrockloc}%_%z-coord of {_bedrockloc}%"
          if difference between {SB::island::%{_bedrockloc}%::created} and now < {SB::config::deletecooldown}:
            message "%{_prefix}% %{SB::lang::cooldown::%{SK::lang::%uuid of player%}%}%"
          else:
            deleteisland(player)
        else:
          tellrawmsg1(player,{_prefix},{SB::lang::isdeleteqestion::%{SK::lang::%uuid of player%}%},"/is delete 2")

    else if arg-1 is "calc":
      #
      # > Only call the calcisland function if the last calculation is some time ago (loger than cooldown time).
      if difference between {SB::calcdown::%uuid of player%} and now < {SB::config::calccooldown}:
        message "%{_prefix}% %{SB::lang::cooldown::%{SK::lang::%uuid of player%}%}%"
      else:
        set {SB::calcdown::%uuid of player%} to now
        $ thread
        calcisland(player)
    #
    # > Argument: "top"
    # > If a player types in /island with the first argument "top",
    # > the top list gets shown to the player using the islandtoplist function.
    else if arg-1 is "top":
      islandtoplist(player,arg-2)
    #
    # > Argument: "spawn" or "lobby"
    # > Actions:
    # > Teleports the player to the configured spawn location.
    else if arg-1 is "spawn" or "lobby":
      teleport player to {SB::config::spawn}
    #
    # > Argument: "invite"
    # > Actions:
    # > The islandmember function gets called to invite the player second argument to the island.
    else if arg-1 is "invite":
      islandmember(player,"invite",arg-2)
    #
    # > Argument: "join"
    # > Actions:
    # > The islandmember function gets called to join the island of the second argument.
    else if arg-1 is "join":
      islandmember(player,"join",arg-2)
    #
    # > Argument: "leave"
    # > Actions:
    # > The islandmember function gets called to leave the island.
    else if arg-1 is "leave":
      islandmember(player,"leave",arg-2)
    #
    # > Argument: "kick"
    # > Actions:
    # > The islandmember function gets called to kick the second argument player.
    else if arg-1 is "kick":
      islandmember(player,"kick",arg-2)
    #
    # > Argument: "help"
    # > If a player types in /island help, islandhelp function is called.
    # > Actions:
    # > Calls the islandhelp function with the player and second argument as parameter.
    # > This sends the help to the chat of the player.
    else if arg-1 is "help":
      islandhelp(player,arg-2)
    #
    # > Argument: "info" ("level" or "lvl")
    # > If a player types in /island info, islandinfo function is called.
    # > Actions:
    # > Calls the islandinfo function with the player and second argument as parameter.
    else if arg-1 is "info" or "level" or "lvl":
      islandinfo(player,arg-2)
    #
    # > Argument: "generator" ("gen" OR "oregen" OR "oregenerator")
    # > If a player types in /island generator, his current generator level is displayed
    # > Actions:
    # > Gets all the broken blocks and calculates the final level the player is currently on and
    # > also display a visual appealing status, how far the next level is away. This is done in a function.
    else if arg-1 is "generator" OR "gen" OR "oregen" OR "oregenerator":
      generatorinfo(player)
    #
    # > Argument: "ores" ("ore" OR "orechances" OR "chances")
    # > If a player types in /island ores, his current chances are displayed
    # > Actions:
    # > Gets all the ore generator chances for the player
    else if arg-1 is "ores" OR "ore" OR "orechances" OR "chances":
      orechancesinfo(player)
    #
    # > Argument: "biome" ("biomes" OR "biom")
    # > If a player types in /island biome, a biome select menu is opened.
    # > Actions:
    # > Opens biome menu
    else if arg-1 is "biome" OR "biomes" OR "biom":
      biomemenu(player)
    #
    # > Argument: "trust"
    # > If a player types in /island trust, the trusthandler function is called.
    # > Actions:
    # > Calls the trusthandler function, which either lists all options, adds someone as
    # > trusted or removes a trusted user, also can list all trusted users.
    else if arg-1 is "trust":
      trusthandler(player,arg-2,arg-3)
    #
    # > Argument: "upgrade" ("upgrades")
    # > If a player types in /island upgrade, the islandupgrademenu function is called.
    # > Actions:
    # > Calls the islandupgrademenu function, which opens the upgrade menu.
    else if arg-1 is "upgrade" or "upgrades":
      islandupgrademenu(player)
    #
    # > Argument: "warp" OR "setwarp" OR "delwarp"
    # > If a player types in /island warp|setwarp|delwarp, the warphandler function is called.
    # > Actions:
    # > Calls the warphandler function, which allows to teleport, set and delete warps.
    else if arg-1 is "warp" or "setwarp" or "delwarp":
      warphandler(player,arg-1,arg-2)
    #
    # > Argument: "lang" OR "language"
    # > If a player types in /island lang|language, the selectlanguage function is called.
    # > Actions:
    # > Calls the selectlanguage function, which opens a menu where the player can change the language.
    else if arg-1 is "lang" or "language":
      selectlanguage(player)
    #
    # > Argument: "c" or "challenges" or "challenge"
    # > If a player types in /island c|challenges|challenge, the openchallenges function is called.
    # > Actions:
    # > Calls the openchallenges function, which opens the challenges menu.
    else if arg-1 is "c" or "challenges" or "challenge":
      openchallenges(player)
    #
    # > Argument: "loot" or "loots" or "lootbox" or "crate" or "crates"
    # > If a player types in /island loot|loots|lootbox|crate|crates, the openlootboxmenu function is called.
    # > Actions:
    # > Calls the openlootboxmenu function, which opens the lootbox menu.
    else if arg-1 is "loot" or "loots" or "lootbox" or "crate" or "crates":
      openlootboxmenu(player)
