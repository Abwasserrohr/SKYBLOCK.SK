#
# ==============
# Events.sk
# ==============
# Events.sk is part of the SKYBLOCK.SK events.
# ==============

import:
  org.bukkit.event.player.PlayerArmorStandManipulateEvent
  org.bukkit.event.entity.EntityDamageByEntityEvent
  org.bukkit.event.vehicle.VehicleDamageEvent
  org.bukkit.Location
  org.bukkit.event.player.PlayerInteractEvent
  org.bukkit.event.player.PlayerInteractEntityEvent
  org.bukkit.event.hanging.HangingBreakByEntityEvent

#
# > Event - PlayerArmorStandManipulateEvent
# > If someone tries to change a armor stand.
# > Actions:
# > Checks if the player is allowed to do it, if not, cancel it.
on PlayerArmorStandManipulateEvent:
  set {_player} to event.getPlayer()
  if {_player} is a player:
    set {_l} to event.getEntity().getLocation()
    set {_allowed} to checkislandaccess({_player},{_l})
    if {_allowed} is false:
      cancel event
#
# > Event -  on despawn of any fish
# > Actions:
# > If a fish despawns, check if it should despawn or not depending 
# > on the setting the server operator set.
on despawn of any fish:
  if {SB::config::preventfishdespawn} is true:
    cancel event

#
# > Event - rightclick
# > If a player rightclicks, this event is triggered
# > Actions:
# > Checks for some tools which can be placed and if it is allowed to be placed, if not, cancel the event.
on rightclick:
  if player's tool is armor stand:
    set {_l} to location of targeted block
    set {_allowed} to checkislandaccess(player,{_l})
    if {_allowed} is not true:
      cancel event

#
# > Event: on any move
# > Action:
# > Once a player moves, the checkislandvisit function gets called
# > within a thread. This is going to handle events if a player
# > is visiting a new island to for example deny access to an island.
on any move:
  $ thread
  checkislandvisit(player)

#
# > Event - bucket fill
# > Once, a player fills a bucket, this event is triggered
# > Actions:
# > If the player is allowed to do this action, cancel the event and then give a island
# > bound lava bucket out.
on bucket fill:
  if event-block is lava:
    set {_allowed} to checkislandaccess(player,event-location)
    if {_allowed} is not false:
      cancel event
      binditem(event-location, player,lava bucket)

#
# > Event - drop
# > Triggered once a player drops something
# > Actions:
# > Checks if the player is allowed to drop something at the location.
on drop:
  set {_allowed} to checkislandaccess(player,event-location,"drop")
  if {_allowed} is false:
    cancel event

#
# > Event - bucket fill
# > Once, a player empties a bucket, this event is triggered
# > Actions:
# > If the player is allowed to do this action and the bucket is bound to an island,
# > cancel the event.
on bucket empty:
  if player's tool is lava bucket:
    set {_allowed} to checkislandaccess(player,event-location)
    if {_allowed} is not false:
      set {_allowed} to bindcheck(player's tool, player)
      if {_allowed} is false:
        cancel event

#
# > Event - EntityDamageByEntityEvent
# > If a entity gets damage by a entity, this event is called.
# > Actions:
# > Checks if the player is allowed to do it, if not, cancel it.
on EntityDamageByEntityEvent:
  set {_player} to event.getDamager()
  if {_player} is a player:
    set {_l} to event.getEntity().getLocation()
    if event.getEntity() is a animal:
      set {_type} to "animal"
    else if event.getEntity() is a monster:
      set {_type} to "monster"
    else:
      set {_type} to "entity"
    set {_allowed} to checkislandaccess({_player},{_l},"EntityDamageByEntityEvent-%{_type}%")
    if {_allowed} is false:
      cancel event
      stop
  #
  # > If the damage has been done by an arrow or snowball.
  if "%{_player}%" is "arrow" or "snowball":
    #
    # > Check, if the shooter is a player, allow skeletons to throw arrows like they want.
    if {_player}.getShooter() is a player:
      #
      # > Get the entity type to check if the shooter is allowed to do this.
      if event.getEntity() is a animal:
        set {_type} to "animal"
      #
      # > If the victim is a player and then check for the pvp setting, if false, cancel the event.
      else if event.getEntity() is a player:
        if {SB::config::pvp} is false:
          cancel event
          stop
      #
      # > If the victim is a monster, set the type to monster.
      else if event.getEntity() is a monster:
        set {_type} to "monster"
      #
      # > If the victim is something else, set it to "entity".
      else:
        set {_type} to "entity"
      #
      # > Check, if the shooter is allowed to shoot and check the location of the entity.
      set {_allowed} to checkislandaccess({_player}.getShooter(),location of event.getEntity(),"EntityDamageByEntityEvent-%{_type}%")
      #
      # > If now allowed, cancel the event.
      if {_allowed} is false:
        cancel event
        stop

#
# > Event: HangingBreakByEntityEvent
# > Triggered if a player tries to break a hanging entity.
# > Actions:
# > Cancel the event if the player isn't allowed to do it.
on HangingBreakByEntityEvent:
  set {_player} to event.getRemover()
  if {_player} is a player:
    set {_l} to event.getEntity().getLocation()
    set {_allowed} to checkislandaccess({_player},event.getEntity().getLocation(),"entity-click")
    if {_allowed} is false:
      event.setCancelled(true)

#
# > Event: VehicleDamageEvent
# > Triggered if a vehicle is damaged, this could be a minecart or a boat.
# > Actions:
# > If the attacker is a player, check if the player is allowed to damage the vehicle, if not, cancel it.
on VehicleDamageEvent:
  set {_player} to event.getAttacker()
  if {_player} is a player:
    set {_l} to event.getVehicle().getLocation()
    set {_allowed} to checkislandaccess({_player},{_l},"VehicleDamageEvent")
    if {_allowed} is false:
      cancel event

#
# > Event - PlayerInteractEvent
# > Triggered, if the player interacts with something.
# > Actions:
# > Checks if the player is allowed to do it, if not, cancel it. (only if the block is soil)
on PlayerInteractEvent:
  #
  # > Set the interaction block to a local variable.
  set {_b} to event.getClickedBlock()
  #
  # > Since pressure plates might get called often, they dont have to be checked, we stop directly here.
  if {_b} is pressure plate or tripwire:
    stop
  #
  # > Prevent dirt duplication using coarse dirt.
  if {_b} is coarse dirt:
    set {_a} to event.getAction()
    if "%{_a}%" is "RIGHT_CLICK_BLOCK":
      if event.getPlayer()'s tool is any hoe:
        cancel event
  #
  # > Check for the following redstone changes (there is a specific flag for this).
  if {_b} is repeater or comparator or daylight detector:
    set {_player} to event.getPlayer()
    if {_player} is a player:
      set {_l} to event.getClickedBlock().getLocation()
      set {_allowed} to checkislandaccess({_player},{_l},"Redstone")
      if {_allowed} is false:
        cancel event
  #
  # > Only prevent these types of interactions and let others trough,
  # > this gets called very often, should be very efficient.
  if {_b} is soil or lever or button or door or trapdoor or fence gate or any chest or trapped chest or shulker box or anvil or enchanting table or jukebox or furnace or brewing stand or flower pot or hopper or dropper or dispenser:
    set {_player} to event.getPlayer()
    if {_player} is a player:
      set {_l} to event.getClickedBlock().getLocation()
      set {_allowed} to checkislandaccess({_player},{_l},"PlayerInteractEvent",{_b})
      if {_allowed} is false:
        cancel event

  #
  # > If there is a potted plant, we check that kind of stuff with a text for now,
  # > since almost every plant can be placed in a flower pot, this is faster than checking
  # > through all types of flower pots.
  if "%{_b}%" contains "potted" or "flower pot with":
    set {_player} to event.getPlayer()
    if {_player} is a player:
      set {_l} to event.getClickedBlock().getLocation()
      set {_allowed} to checkislandaccess({_player},{_l},"build")
      if {_allowed} is false:
        cancel event

  
#
# > Event - place
# > Triggered, if the player places a block.
# > Actions:
# > Checks if the player is allowed to do it, if not, cancel it.
on place:
  set {_allowed} to checkislandaccess(player,location of event-block,"build")
  #
  # > If the player is allowed to build and the event-block is also a hopper,
  # > check, run the hoppercounter function.
  if event-block is hopper:
    if {_allowed} is true:
      set {_allowed} to hoppercounter(player, "place")
  #
  # > If the placed block is dirt, grass or farmland, check if it is bound to
  # > an specific island.
  if event-block is dirt or grass or farmland or obsidian or grass path:
    if {_allowed} is true:
      set {_allowed} to bindcheck(player's tool, player)
  if {_allowed} is false:
    cancel event

#
# > Event - place
# > Triggered, if the player breaks a block.
# > Actions:
# > Checks if the player is allowed to do it, if not, cancel it.
on break:
  set {_allowed} to checkislandaccess(player,location of event-block,"build")
  #
  # > If the player is allowed to build and the event-block is also a hopper,
  # > check, run the hoppercounter function.
  if event-block is hopper:
    if {_allowed} is true:
      set {_allowed} to hoppercounter(player, "break")
  if {_allowed} is false:
    cancel event
  if {_allowed} is true:
    #
    # > If the player is allowed to break the block, check if the block is
    # > dirt, grass or farmland and then add a island binding to it, if the
    # > island is below level 100.
    if event-block is dirt or grass or farmland or grass path:
      cancel event
      binditem(event-location, player,dirt)
    #
    # > Prevent dirt duplication through podzol revert.
    if event-block is podzol block:
      cancel event
      binditem(event-location, player,podzol block,true)
    if event-block is obsidian:
      cancel event
      binditem(event-location, player,obsidian)
      #
	  # > If the obsidian block is also on the opposite site, it is in most cases a nether portal,
	  # > break the obsidian on the other side (nether|world) too.
      if {SB::config::nether} is true:
        if player's world is "%{SB::config::netherworld}%":
          set {_target} to {SB::config::world}
        else if player's world is "%{SB::config::world}%":
          set {_target} to {SB::config::netherworld}
        set {_x} to x-coord of event-block
        set {_y} to y-coord of event-block
        set {_z} to z-coord of event-block
        set {_loc} to location at {_x}, {_y}, {_z} in "%{_target}%" parsed as world
        if block at {_loc} is obsidian:
          set the block at {_loc} to air
#
# > Event - rightclick on a entity
# > Triggered, if the player rightclicks on an entity
# > Actions:
# > Checks if the player is allowed to do it, if not, cancel it.
on rightclick on entity:
  if "%event-entity%" contains "minecart" or "boat":
    set {_allowed} to checkislandaccess(player,location of event-entity,"vehicle-click")
  else:
    set {_allowed} to checkislandaccess(player,location of event-entity,"entity-click")
  if {_allowed} is false:
    cancel event

#
# > Event - PlayerInteractEntityEvent
# > Triggered once a player interacts with a entity.
# > Actions:
# > Cancels the event if the player isn't allowed to interact.
on PlayerInteractEntityEvent:
  set {_allowed} to checkislandaccess(event.getPlayer(),event.getRightClicked().getLocation(),"entity-click")
  if {_allowed} is false:
    cancel event

#
# > Event - on spawn of a phantom
# > Triggered, if a phantom spawns
# > Actions:
# > Chacks if phantoms are disabled, if they are, cancel this event.
on spawn of a phantom:
  if {SB::config::phantomspawn} is true:
    cancel event

#On player death, save the hunger bar to reset it after the respawn, this makes food worth more
on death of player:
  set {_p} to victim
  if {_p} is a player:
    if {_p} is online:
      if {SB::config::preventhungerreset} is true:
        set {SB::hunger::%{_p}%} to hunger of {_p}
on respawn:
  wait a tick
  if {SB::player::%uuid of player%::island::bedrock} is set:
    make player execute command "/is home"
  else:
    make player execute command "/is spawn"
  if {SB::config::preventhungerreset} is true:
    set hunger of player to {SB::hunger::%player%}

#
# > Event: on damage
# > Actions:
# > Checks if the player is invincible and cancels the event if that's the case.
# > Then, it is also checked if the pvp flag for the island is enabled, if it is
# > disabled, the event also gets canceled again.
on damage:
  set {_prefix} to getlang("prefix",getlangcode(attacker))
  set {_a} to getlang("nopvp",getlangcode(attacker))
  #
  # > Only check for invinciblity or pvp flag it the victim is a player.
  if victim is a player:
    if {SB::invincible::%victim%} is set:
      cancel event
    if attacker is a player:
      handlegeneralflagevent(event,false,location of victim,"pvp")

#
# > Event: on ignition
# > Actions:
# > Triggered if something catches fire, calls the handlegeneralflagevent to check the flag
# > on the island and cancel it.
on ignition:
  #
  # > Allow players to ignire blocks, even if the flag is set to disallow this.
  if player is set:
    stop
  handlegeneralflagevent(event,false,event-location,"fire-spread")

#
# > Event: on spawn of a monster
# > Actions:
# > If a monster spawns, check if the event should get cancelled.
on spawn of a monster:
  handlegeneralflagevent(event,false,event-location,"mob-spawning")

#
# > Event: on spawn of a slime
# > Actions:
# > If a slime spawns, check if the event should get cancelled.
on spawn of a slime:
  handlegeneralflagevent(event,false,event-location,"slime-spawning")

#
# > Event: on toggling gliding
# > Actions:
# > If someone wants to glide with elytra while being on an island
# > where it is disabled, the gliding toggle is cancelled.
on toggling gliding:
  if gliding of player is false:
    set {_allowed} to checkislandaccess(player,location of player,"elytra")
    if {_allowed} is false:
      cancel event

#
# > Event: on shoot
# > Actions:
# > If the shooter shoots something, check if it is allowed. If not, cancel the event.
on shoot: 
  set {_allowed} to checkislandaccess(shooter,location of shooter,"shoot")
  if {_allowed} is false:
    cancel event
#
# > Event: on explode
# > Actions:
# > Triggered on an explosion, checks for the nearest player and then check if the explosion is allowed.
on explode:
  set {_l} to event-location
  loop players in radius 30 of {_l}:
    set {_player} to loop-player
    stop loop
  set {_allowed} to checkislandaccess({_player},{_l},"Explode")
  if {_allowed} is false:
    cancel event
 
# > Event: on script load
# > Actions:
# > This is loaded once the skript is loaded, it deletes some variables which aren't needed anymore
# > and also goes trough islands which should be deleted, all island locations are saved within
# > the {deleteisland.1::*} and {deleteisland.2::*} array.
on script load:
  set {SB::searchprocess} to false
  delete {SB::searchis::*}
  delete {SB::hunger::*}
  delete {SB::calcstatus::*}
  delete {SB::actionload::*}
  if {deleteisland.1::*} is set:
    #
    # > If there are islands to delete, wait 20 seconds until important functions are loaded
    # > and then delete the islands.
    send "There are islands to delete. Deleting islands now, please do not stop the server." to console
    wait 20 seconds
  #
  # > Loop through all island which have to be deleted.
  loop {deleteisland.1::*}:
    #
    # > Send messages into the console to inform the admin about the delete process.
    send "Deleting islands now. Please be patient. Do not stop the server!" to console
    set {_loc1} to loop-value
    set {_loc2} to {deleteisland.2::%loop-index%}
    #
    # > Get the minimum and maximum coordinate for each x-, y- and z-coord.
    set {_x1} to getmin(x-coord of block at {_loc1}, x-coord of block at {_loc2})
    set {_x2} to getmax(x-coord of block at {_loc1}, x-coord of block at {_loc2})
    set {_y1} to getmin(y-coord of block at {_loc1}, y-coord of block at {_loc2})
    set {_y2} to getmax(y-coord of block at {_loc1}, y-coord of block at {_loc2})
    set {_z1} to getmin(z-coord of block at {_loc1}, z-coord of block at {_loc2})
    set {_z2} to getmax(z-coord of block at {_loc1}, z-coord of block at {_loc2})
    #
    # > Loop through the island by going through every x- and z-coord and then
    # > looping the y-coordinate trough. Then remove every block and 
    # > clear all block inventories.
    set {_x} to {_x1}
    while {_x} < {_x2}:
      add 1 to {_x}
      set {_z} to {_z1}
      while {_z} < {_z2}:
        add 1 to {_z}
        add 1 to {_blocksremoved}
        set {_l1} to location at {_x}, 256, {_z} in "%{_loc1}'s world%" parsed as world
        set {_l2} to {_l1}
        set y-coord of {_l2} to 0
        loop all blocks from block at {_l1} to block at {_l2}:
          #
          # > Loop through entities that may live at the block.
          loop entities in radius 0.7 of loop-block:
            #
            # > If there is a entity, kill it.
            kill loop-entity
          #
          # > Clear the inventory of blocks with inventory out.
          if loop-block's inventory is set:
            clear loop-block's inventory
          if loop-block is not air or cave air:
            set loop-block to air
            add 1 to {_i}
          if {_i} is 500:
            wait 1 tick
            delete {_i}
    #
    # > If the nether is enabled for building islands, also delete the island in the nether.
    if {SB::config::nether} is true:
      set {_loc1} to location at x-coord of {_loc1}, y-coord of {_loc1}, z-coord of {_loc1} in "%{SB::config::netherworld}%" parsed as world
      set {_loc2} to location at x-coord of {_loc2}, y-coord of {_loc2}, z-coord of {_loc2} in "%{SB::config::netherworld}%" parsed as world
      #
      # > Repeat the same deletation process as above with the nether world.
      set {_x} to {_x1}
      while {_x} < {_x2}:
        add 1 to {_x}
        set {_z} to {_z1}
        while {_z} < {_z2}:
          add 1 to {_z}
          set {_l1} to location at {_x}, 256, {_z} in "%{_loc1}'s world%" parsed as world
          set {_l2} to {_l1}
          set y-coord of {_l2} to 0
          loop all blocks from block at {_l1} to block at {_l2}:
            #
            # > Loop through entities that may live at the block.
            loop entities in radius 0.7 of loop-block:
              #
              # > If there is a entity, kill it.
              kill loop-entity
            #
            # > Clear the inventory of blocks with inventory out.
            if loop-block's inventory is set:
              clear loop-block's inventory
            if loop-block is not air or cave air:
              set loop-block to air
              add 1 to {_i}
            if {_i} is 500:
              wait 1 tick
              delete {_i}
    #
    # > Save the game regularly to disk while deleting.
    execute console command "/save-all"
    delete {deleteisland.1::%loop-index%}
    delete {deleteisland.2::%loop-index%}
  delete {SB::ISDELPROCESS}
  #
  # > To prevent any data being kept here, delete it again completly:
  delete {deleteisland.1::*}
  delete {deleteisland.2::*}
  #
  # > If we're done with deleting islands, also double check there is not a level entry left.
  # > If there is one left, delete it and delete all variables to the island.
  loop {SB::islvl::*}:
    set {_loc::*} to loop-index split at "_"
    set {_loc::1} to {_loc::1} parsed as number
    set {_loc::2} to {_loc::2} parsed as number
    set {_loc::3} to {_loc::3} parsed as number
    set {_bedrock} to location at {_loc::1}, {_loc::2}, {_loc::3} in "%{SB::config::world}%" parsed as world
    if block at {_bedrock} is air:
      delete {SB::islvl::%loop-index%}
      delete {SB::island::%{_loc::1}%_%{_loc::2}%_%{_loc::3}%::leader}
      delete {SB::island::%{_loc::1}%_%{_loc::2}%_%{_loc::3}%::level}
      delete {SB::island::%{_loc::1}%_%{_loc::2}%_%{_loc::3}%::exp}
      delete {SB::island::%{_loc::1}%_%{_loc::2}%_%{_loc::3}%::created}
  #
  # > If we're done, allow players back on the server by disabling the whitelist.
  execute console command "/whitelist off"
  send "Island deletation done." to console

#
# > Event - on script unload:
# > Triggered once this script is shut down. Reloading isn't enough.
# > Actions:
# > Enabled the whitelist and prepares a variable for the island deletation
# > process after the server has been started again.
on script unload:
  execute console command "/whitelist on"
  set {SB::ISDELPROCESS} to true

# > Event: join
# > Triggered once a player enters the server
# > Actions:
# > Makes the player invincible, checks if the user has been kicked from an island
# > and also sets the lastactive state to now to prevent purge of the island.
on join:
  set {SB::invincible::%player%} to 1
  wait a tick
  if getlangcode(player) is not set:
    set {SK::lang::%uuid of player%} to "de"
  set {_uuid} to uuid of player
  if {Leave.%{_uuid}%} is set:
    delete {Leave.%uuid of player%}
    leaveisland(player, "member")
    make player execute "/is leave"
    set {_prefix} to getlang("prefix",getlangcode(player))
    set {_msg} to getlang("deletekickmember",getlangcode(player))
    send "%{_prefix}% %{_msg}%"
    
  #
  # > Set the last activity of the island the player is on to now
  set {_bedrock} to {SB::player::%uuid of player%::island::bedrock}
  if {_bedrock} is set:
    set {_l::1} to x-coord of {_bedrock}
    set {_l::2} to y-coord of {_bedrock}
    set {_l::3} to z-coord of {_bedrock}
    set {SB::island::%{_l::1}%_%{_l::2}%_%{_l::3}%::lastactive} to now
  wait 5 seconds
  delete {SB::invincible::%player%} 
#
# > Event - connect
# > Triggered if a player connects
# > Actions:
# > Force the language "de" and kick the player if the island deletation process is ongoing.
on connect:
  if {SB::ISDELPROCESS} is set:
    if player doesn't have permission "%{SB::config::buildpermission}%":
      set {_prefix} to getlang("prefix",getlangcode(player))
      set {_msg} to getlang("delismsg",getlangcode(player))
      kick player due to "%{_prefix}% %{_msg}%"
#
# > Event - teleport
# > Triggered on a teleportation
# > Actions:
# > If the teleported entity is a player and the teleport cause is a nether portal, check
# > through settings if this is allowed or not.
on teleport:
  if event-entity is a player:
    if "%teleport cause%" is "nether portal":
      #
      # > If no special non-vanilla effect should happen, stop this skript here.
      if {SB::config::nether} is false:
        if {SB::config::portalenter} is true:
          stop
        #
        # > Cancel the event because portal entering is disallowed by configuration.
        cancel event
        stop
      #
      # > Cancel the event if the nether is enabled
      cancel event
      set {_p} to event-entity
      #
      # > Check the location of the opposite world (nether|world) for a portal.
      set {_l} to location of {_p}
      set {_x} to x-coord of {_l}
      set {_y} to y-coord of {_l}
      set {_z} to z-coord of {_l}
      if {_p}'s world is "%{SB::config::netherworld}%":
        set {_target} to "%{SB::config::world}%"
      else if {_p}'s world is "%{SB::config::world}%":
        set {_target} to "%{SB::config::netherworld}%"
      set {_newloc} to location at {_x}, {_y}, {_z} in "%{_target}%" parsed as world
      #
      # > Loop around the player and call the syncobsidian function to copy
      # > the portal over to the other world.
      loop blocks in radius 5 around {_p}:
        if loop-block is obsidian:
          syncobsidian(loop-block)
          stop loop
      #
      # > Teleport the player to the other world (nether|world).
      teleport {_p} to {_newloc}
      #
      # > If the player has an island and the island block of the player has no
      # > bedrock in the nether yet, it is going to be set.
      if {SB::player::%uuid of player%::island::bedrock} is set:
        set {_x} to x-coord of {SB::player::%uuid of player%::island::bedrock}
        set {_y} to y-coord of {SB::player::%uuid of player%::island::bedrock}
        set {_z} to z-coord of {SB::player::%uuid of player%::island::bedrock}
        set {_netherbedrock} to location at {_x}, {_y}, {_z} in "%{_target}%" parsed as world
        if block at {_netherbedrock} is not bedrock:
          set block at {_netherbedrock} to bedrock
