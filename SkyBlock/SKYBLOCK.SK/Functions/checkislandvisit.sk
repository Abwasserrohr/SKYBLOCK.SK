#
# ==============
# checkislandvisit.sk
# ==============
# checkislandvisit.sk is part of the SKYBLOCK.SK functions.
# ==============

#
# > Function - checkislandvisit
# > Parameters:
# > <player>the player who should be checked for a island visit
# > Actions:
# > Checks if the player has moved over to another island, if that's the case,
# > the flag of the target island is checked and if access is denied, the player
# > gets teleported to the lobby. If it is not denied, the player gets a
# > welcome message.
function checkislandvisit(player:player):
  #
  # > If the last bedrock location of the player isn't the current one.
  if metadata value "lastbedrocklocation" of {_player} is not getcurrentbedrock({_player},location of {_player}):
    #
    # > Get the current bedrock location and the leader.
    set {_ploc} to location of {_player}
    set {_loc} to getcurrentbedrock({_player},location of {_player})
    set {_loc1} to "%x-coord of {_loc}%_%y-coord of {_loc}%_%z-coord of {_loc}%"
    #
    # > Get the leader parsed as an offline player.
    set {_leader} to {SB::island::%{_loc1}%::leader} parsed as offline player
    #
    # > If there is no island owner, set it to "-".
    if {_leader} is not set:
      set {_leader} to "-"
    #
    # > If the last leader (owner) of the island isn't the same as the current one, go forward.
    if metadata value "lastbedrockleader" of {_player} is not {_leader}:
      #
      # > Set the new leader (owner) and the bedrock location to the metadata of the player.
      set metadata value "lastbedrocklocation" of {_player} to {_loc}
      set metadata value "lastbedrockleader" of {_player} to {_leader}
      #
      # > Get the language code of the player for translated messages.
      set {_lang} to getlangcode({_player})
      #
      # > If the access for this island is denied, execute /island spawn for the
      # > player. Since this should be in a threaded environment, we can't simply
      # > teleport the player in this case.
      if checkislandaccess({_player},{_player}'s location, "access") is false:
        make {_player} execute "/island spawn"
        #
        # > Tell the player that there is no access to the island.
        send action bar getlang("islandaccess_noaccess",{_lang}) to {_player}
      else:
        #
        # > If the island isn't abadoned, send a welcome message.
        if {_leader} is not "-":
          set {_msg} to getlang("islandaccess_welcome",{_lang})
          replace all "<leader>" with "%{_leader}%" in {_msg}
        send action bar {_msg} to {_player}
    #
    # > Delete any used local variables.
    delete {_leader}
    delete {_ploc}
    delete {_loc}
    delete {_loc1}
    delete {_lang}
    delete {_msg}

#
# > Event: on quit
# > Actions:
# > Deletes metadata which has been used by the checkislandvisit function
# > once a player leaves the game.
on quit:
  delete metadata value "lastbedrocklocation" of player
  delete metadata value "lastbedrockleader" of player
