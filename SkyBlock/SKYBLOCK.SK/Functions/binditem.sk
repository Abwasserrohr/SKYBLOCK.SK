#
# ==============
# binditem.sk
# ==============
# binditem.sk is part of the SKYBLOCK.SK functions.
# ==============
#

# > To get the enchantment of the tool the player is using, we need this class.
import:
  org.bukkit.enchantments.Enchantment

#
# > Function: binditem
# > Arguments:
# > <location>event location, <player>player, <boolean>should the same block given as drop as broken? [true=yes|false=no]
# > Actions:
# > If the island of the player is lower than the configured level, the dirt|grass|farmland
# > is going to be island bound and can only be used on exactly this island.
function binditem(el:location,p:player,block1:item,givesameblock:boolean=false):
  #
  # > Get the block at the location as a new item.
  delete {_block}
  set {_block} to "%block at {_el}%" parsed as item
  #
  # > Get the tool the player is holding to check, know later, if
  # > the player holds an enchanted tool.
  set {_item} to {_p}'s tool
  set {_enchantments} to {_item}.getEnchantments()
  #
  # > Set the block to air to then later drop a item there.
  set block at {_el} to air
  #
  # > Get the current bedrock where the player wants to break an block:
  set {_bedrock} to getcurrentbedrock({_p},{_el})
  set {_x} to x-coord of {_bedrock}
  set {_y} to y-coord of {_bedrock}
  set {_z} to z-coord of {_bedrock}
  #
  # > If the tool the player is using is not enchanted with silk touch,
  # > do overwrite the {_block} with a new created dirt item.
  if "%{_enchantments}%" does not contain "silk_touch":
    set {_block} to {_block1}
  #
  # > Delete any left over lore which might got here due to caching
  # > in Skript itself.
  set {_ItemMeta} to {_block}.getItemMeta()
  {_ItemMeta}.setLore(null)
  {_block}.setItemMeta({_ItemMeta})
  #
  # > If the island level is below a specified level in the configuration:
  if {SB::island::%{_x}%_%{_y}%_%{_z}%::level} < {SB::config::binduntillevel}:
    #
    # > Set the item lore to check later that it is island bound. It is also,
    # > marked as island bound.
    set {_uuid} to uuid of {_p}
    set {_lore} to getlang("islandbound",getlangcode({_p}))
    add "&r%{_lore}%", "&7%{_x}%_%{_z}%" to {_lore::*}
    set lore of {_block} to {_lore::*}
  #
  # > Now drop the item, either dirt or the block at the location.
  # > If the island is over the specified level, the item doesn't have a lore.
  # > If the block is not a lava bucket, drop it.
  if {_block} is not lava bucket:
    if {_givesameblock} is true:
      drop 1 of {_block1} at {_el}
    else:
      drop 1 of {_block} at {_el}
  #
  # > If the {_block} is a lava bucket, try to give it to the player, if
  # > the inventory is full, drop it. Also remove one bucket from player's
  # > inventory.
  else:
    if {_p}'s inventory has not enough space for 1 of {_block}:
      remove 1 of bucket from {_p}'s inventory
      drop 1 of {_block} at {_el}
    else:
      remove 1 of bucket from {_p}'s inventory
      give {_p} 1 of {_block}

#
# > Function: bindcheck
# > Arguments:
# > <item>item, <player>player
# > Actions:
# > This is called if a player wants to build a dirt, grass or farmland block,
# > bindcheck checks, if the block is not marked as island bound or is bound to the
# > island where it is going to be placed.
function bindcheck(i:item, p:player) :: boolean:
  #
  # > Get the current bedrock where the player wants to build something:
  set {_bedrock} to getcurrentbedrock({_p},location of {_p})
  #
  # > If the lore is not empty, it has to be the bindcheck. Since dirt doesn't
  # > have any lore by default.
  if 1st line of lore of {_i} is set:
    #
    # > Get the x- and z-coordinate to check if the lore contains them.
    set {_x} to x-coord of {_bedrock}
    set {_z} to z-coord of {_bedrock}
    #
    # > If it is the block bound to this island, let it trough.
    if 2nd line of lore of {_i} contains "%{_x}%_%{_z}%":
      return true
    else:
    #
    # > If the block is bound to another island, print error and return false.
      set {_prefix} to getlang("prefix",getlangcode({_p}))
      set {_msg} to getlang("boundtoanotherisland",getlangcode({_p}))
      message "%{_prefix}% %{_msg}%" to {_p}
      return false
