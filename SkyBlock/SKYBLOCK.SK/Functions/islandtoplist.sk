#
# ==============
# islandtoplist.sk
# ==============
# islandtoplist.sk is part of the SKYBLOCK.SK functions.
# ==============

import:
  net.md_5.bungee.api.chat.TextComponent
  net.md_5.bungee.api.chat.BaseComponent
  net.md_5.bungee.api.chat.ComponentBuilder
  net.md_5.bungee.api.chat.ClickEvent
  net.md_5.bungee.api.chat.HoverEvent
  net.md_5.bungee.api.chat.HoverEvent$Action as HoverEventAction
  net.md_5.bungee.api.chat.ClickEvent$Action as ClickEventAction
  org.bukkit.inventory.ItemStack
  org.bukkit.Material

	
# > Function - islandtoplist:
# > Arguments:
# > <player>player, <text>pageint
# > Actions:
# > The islandtoplist sends a toplist into the chat of the player.
function islandtoplist(p:player,pageint:text,gui:boolean=false,sorted:text="island"):
  #
  # > Wait a short time to prevent client side bugs
  if {_gui} is true:
    wait 2 ticks
  #
  # > Check if the sorted variable is valid:
  if {_sorted} is not "island" or "challenge" or "visitors":
    set {_sorted} to "island"
  #
  # > Save some variables to local variables.
  set {_pageint} to "%{_pageint}%" parsed as number
  set {_playeruuid} to uuid of {_p}
  set {_lang} to getlangcode({_p})
  set {_prefix} to getlang("prefix",{_lang})
  #
  # > If the page is not set, send the player a error and stop here.
  if {_pageint} is not set:
    set {_msg} to getlang("notanumber",{_lang})
    message "%{_prefix}% %{_msg}%" to {_p}
    stop
  #
  # > Get the bedrock location to format it into the same format as levels are saved to be
  # > later able to check if the loop-value is the same as the island of the player.
  set {_pbedrock} to {SB::player::%{_playeruuid}%::island::bedrock}
  set {_pbedrock} to "%x-coord of {_pbedrock}%_%y-coord of {_pbedrock}%_%z-coord of {_pbedrock}%"
  #
  # > If there is no island level set, there is basically no island there to display.
  if {SB::islvl::*} is not set:
    set {_msg} to getlang("nois",{_lang})
    message "%{_prefix}% %{_msg}%" to {_p}
    stop
  #
  # > Go trough this if we want the island toplist.
  if {_sorted} is "island":
    #
    # > Get the island levels as local variable.
    loop {SB::islvl::*}:
      #
      # > If there is already a level set for this island, delete the list entry.
      if {_level::%loop-index%} is set:
        delete {SB::islvl::%loop-index%}
      #
      # > Set the entries to a new list to sort it, do not mess with the list saved on disk.
      set {_level::%loop-index%} to loop-value
  #
  # > Go through this part if the challenge toplist is wanted.
  else if {_sorted} is "challenge":
    #
    # > Get the challenge experience as local variable.
    loop {SB::islvl::*}:
      if {SB::island::%loop-index%::challengexp} is 0:
        set {_level::%loop-index%} to 0
      else:
        set {_level::%loop-index%} to {SB::island::%loop-index%::challengexp}
  #
  # > Go through this part if the visitors toplist is wanted.
  else if {_sorted} is "visitors":
    #
    # > Get the visitors as local variable.
    loop {SB::islvl::*}:
      if {SB::visits::%loop-index%} is 0:
        set {_level::%loop-index%} to 0
      else:
        set {_level::%loop-index%} to {SB::visits::%loop-index%}
  #
  # > Revert the list from random to low to high. {_l2h::*} -> l2h means low to high.
  loop {_level::*}:
    add 1 to {_size}
    if {_l2h::%loop-value%} is not set:
      set {_l2h::%loop-value%} to loop-index
    else:
      set {_n} to 0
      loop {_size} times:
        set {_n} to {_n}+1
        if {_l2h::%loop-value-1%.%{_n}%} is not set:
          set {_l2h::%loop-value-1%.%{_n}%} to loop-index
          stop loop
  set {_n} to size of {_l2h::*}
  #
  # > Reverts low to high to high to low list to get a toplist.
  loop {_l2h::*}:
    set {_h2l::%{_n}%} to loop-value
    set {_n} to {_n}-1
  set {_page} to 1
  #
  # > Go trough the new high to low list and create a toplist.
  loop {_h2l::*}:
    add 1 to {_pageentries}
	#
	# > 
    add 1 to {_rank}
    set {_top::%{_page}%::%{_rank}%} to loop-value
	#
	# > If the current loop value is the same as the bedrock string of the player, set it to the current rank of the player.
    if loop-value is {_pbedrock}:
      #
      # > {_pRank} is the player rank.
      set {_pRank} to {_rank}
    if {_pageentries} is 10:
      set {_pageentries} to 0
      add 1 to {_page}
  #
  # > If the page is not set in the top list, send a error and stop.
  if {_top::%{_pageint}%::*} is not set:
    set {_msg} to getlang("pagenotfound",{_lang})
    replace all "<pages>" with "%{_page}%" in {_msg}
    message "%{_prefix}% %{_msg}%" to {_p}
    stop
  #
  # > Use the ComponentBuilder to create a text with hover and click events.
  set {_toplistbook} to ""
  set {_book} to new ComponentBuilder({_toplistbook})
  #
  # > The header line of the page.
  set {_line} to getlang("topheader",{_lang})
  replace all "<start>" with "%{_pageint}%" in {_line}
  replace all "<end>" with "%{_page}%" in {_line}
  {_book}.append(newTextComponent("%{_line}%%nl%"))
  {_book}.append(newTextComponent(getlang("islandtoplist_sortby",{_lang})))
  if {_sorted} is "island":
    set {_prefix} to "&l"
  else:
    set {_prefix} to "&r"
  set {_msg} to newTextComponent(getlang("islandtoplist_island",{_lang},{_prefix}))
  set {_msg} to setclickcmdevent({_msg},"/island top 1")
  set {_msg} to sethovertextevent({_msg},getlang("islandtoplist_island_hover",{_lang}))
  {_book}.append({_msg})
  if {_sorted} is "challenge":
    set {_prefix} to "&l"
  else:
    set {_prefix} to "&r"
  set {_msg} to newTextComponent(getlang("islandtoplist_challenge",{_lang},{_prefix}))
  set {_msg} to setclickcmdevent({_msg},"/island top 1 challenge")
  set {_msg} to sethovertextevent({_msg},getlang("islandtoplist_challenge_hover",{_lang}))
  {_book}.append({_msg})
  if {_sorted} is "visitors":
    set {_prefix} to "&l"
  else:
    set {_prefix} to "&r"
	
  set {_msg} to newTextComponent(getlang("islandtoplist_visitors",{_lang},{_prefix}))
  set {_msg} to setclickcmdevent({_msg},"/island top 1 visitors")
  set {_msg} to sethovertextevent({_msg},getlang("islandtoplist_visitors_hover",{_lang}))
  {_book}.append({_msg})
  set {_msg} to overwritecomponentevents(newTextComponent(" %nl%"))
  {_book}.append({_msg})
  #
  # > Loop through the toplist site, the player has requested.
  loop {_top::%{_pageint}%::*}:
    set {_member} to ""
    set {_loc} to "%loop-value%"
	#
	# > Get the members of an island, if there are any of them.
    loop {SB::island::%loop-value%::member::*}:
      set {_tp} to "%loop-value-2%" parsed as offline player
      if {_member} is "":
        set {_member} to "%{_tp}%"
      else:
        set {_member} to "%{_member}%, %{_tp}%"
    set {_lp} to "%{SB::island::%loop-value%::leader}%" parsed as offline player
    #
    # > Get translated toplist and replace all placeholders to send it to the player.
    set {_rank} to getlang("istoplist",{_lang})
    set {_length} to loop-index parsed as number
    set {_length} to "%{_length}+9%"
    #
    # > Changes all ranks to the same length by adding a 0 in front
    # > of lower numbers.
    if length of loop-index < length of {_length}:
      replace all "<rank>" with "0%loop-index%" in {_rank}
    else:
      replace all "<rank>" with loop-index in {_rank}
    #
    # > Replace the name placeholder with the rank holder.
    replace all "<name>" with "%{_lp}%" in {_rank}
    set {_msg} to newTextComponent("%{_rank}%%nl%")
    set {_msg} to setclickcmdevent({_msg},"/island info %{_lp}% island top %{_pageint}% %{_sorted}%")
    #
    # > Prepare and set the on hover event text for the toplist.
    set {_hovertext} to getlang("toplistbookhover",{_lang})
    replace all "<name>" with "%{_lp}%" in {_hovertext}
    replace all "<rank>" with loop-index in {_hovertext}
    replace all "<level>" with "%{SB::islvl::%loop-value%}%" in {_hovertext}
    set {_cxp} to {SB::island::%loop-value%::challengexp}
    if {_cxp} is not set:
      set {_cxp} to 0
    replace all "<challengexp>" with "%{_cxp}%" in {_hovertext}
    if {SB::visits::%loop-value%} is not set:
      set {_visits} to 0
    else:
      set {_visits} to {SB::visits::%loop-value%}
    replace all "<visitors>" with "%{_visits}%" in {_hovertext}
    set {_msg} to sethovertextevent({_msg},{_hovertext})
    {_book}.append({_msg})
  #
  # > Append a new line.
  {_book}.append(newTextComponent(" %nl%"))
  #
  # > If this page isn't the first page, add a "back" button.
  set {_msg} to newTextComponent("&l←&r")
  if {_pageint} != 1:
    set {_lore} to getlang("store_pagebackwardlore",{_lang})
    set {_head} to getlang("store_pagebackward",{_lang})
    set {_msg} to sethovertextevent({_msg},"%{_head}%%nl%%{_lore}%")
    set {_msg} to setclickcmdevent({_msg},"/island top %{_pageint} - 1%")
  #
  # > If the site is the first one, add the go back to previous menu command.
  else:
    set {_lore} to getlang("guibacktopreviousmenulore",{_lang})
    set {_head} to getlang("store_pagebackward",{_lang})
    set {_msg} to sethovertextevent({_msg},"%{_head}%%nl%%{_lore}%")
    set {_msg} to setclickcmdevent({_msg},"/island")
  {_book}.append({_msg})
  #
  # > If the current page is smaller than the maximum page size,
  # > create the "go forward" text component.
  if {_pageint} < {_page}:
    #
    # > Add some space between the "go backwards" text component.
    set {_msg} to newTextComponent("                        ")
    set {_msg} to overwritecomponentevents({_msg})
    #
    # > Add the actual "go forward" text component.
    {_book}.append({_msg})
    set {_msg} to newTextComponent("&l→&r")
    set {_lore} to getlang("store_pageforwardlore",{_lang})
    set {_head} to getlang("store_pageforward",{_lang})
    set {_msg} to sethovertextevent({_msg},"%{_head}%%nl%%{_lore}%")
    set {_msg} to setclickcmdevent({_msg},"/island top %{_pageint} + 1%")
    {_book}.append({_msg})
  #
  # > Complete the BaseComponent by creating it and adding it to the sites list.
  add {_book}.create() to {_sites::*}

  #
  # > Create a new book which is going to be used, create it as Bukkit ItemStack to prevent
  # > Skript side bugs.
  set {_item} to new ItemStack(Material.WRITTEN_BOOK!, 1)
  set {_bookmeta} to {_item}.getItemMeta()
  {_bookmeta}.setTitle("Toplist")
  {_bookmeta}.setAuthor("Immanuel94")
  #
  # > Set the sites to the book and then open it to the player.
  {_bookmeta}.spigot().setPages({_sites::*})

  {_item}.setItemMeta({_bookmeta})
  #
  # > Get the item of the player to give it back after the book has been opened.
  set {_tool} to {_p}'s tool
  set {_p}'s tool to {_item}
  openbook({_p})
  set {_p}'s tool to {_tool}
