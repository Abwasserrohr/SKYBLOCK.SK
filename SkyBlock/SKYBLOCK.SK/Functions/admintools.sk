#
# ==============
# admintools.sk
# ==============
# admintools.sk is part of the SKYBLOCK.SK functions.
# ==============

#
# > Function: purgeislands
# > Arguments:
# > <player>player,<text>amount of time, <text>confirm argument
# > Actions:
# > Purges all islands which have been inactive since a specified timeframe of days.
function purgeislands(p:player,arg3:text,arg4:text):
  set {_uuid} to uuid of {_p}
  set {_lang} to getlangcode({_p})
  set {_prefix} to getlang("prefix",{_lang})
  set {_days} to "%{_arg3}% days" parsed as timespan
  loop {SB::islvl::*}:
    if {SB::island::%loop-index%::lastactive} is not set:
      set {SB::island::%loop-index%::lastactive} to now
    if {SB::island::%loop-index%::created} is not set:
      set {SB::island::%loop-index%::created} to now
    if difference between {SB::island::%loop-index%::lastactive} and now is bigger than {_days}:
      add loop-index to {_delislands::*}
  if {_arg4} is "purgeok":
    loop {_delislands::*}:
      deleteisland({SB::island::%loop-index%::leader} parsed as offline player)
    set {_msg} to getlang("isadmin_deletedxis",{_lang})
    replace all "<amount>" with "%size of {_delislands::*}%" in {_msg}
    message "%{_prefix}% %{_msg}%" to {_p}
    set {_msg} to getlang("isadmin_isremovedonrestart",{_lang})
    message "%{_prefix}% %{_msg}%" to {_p}
    stop
  #
  # > Create a tellraw to ask if the user really wants to purge the islands
  set {_msg} to getlang("isadmin_xwouldbedeleted",{_lang})
  replace all "<amount>" with "%size of {_delislands::*}%" in {_msg}
  message "%{_prefix}% %{_msg}%" to {_p}
  set {_msg} to getlang("isadmin_areyousuretodelete",{_lang})
  replace all "<amount>" with "%size of {_delislands::*}%" in {_msg}
  set {_prefix} to "%{_prefix}% %{_msg}%"
  set {_msg} to getlang("isadmin_yes",{_lang})
  tellrawmsg1({_p},{_prefix},{_msg},"/islandadmin island purge %{_arg3}% purgeok")

#
# > Function: admintools_deleteisland
# > Arguments:
# > <player>player,<text>arg3 player as text, <text>confirm argument
# > Actions:
# > Deletes the specified island, if the confirm argument is set to "deleteok".
function admintools_deleteisland(p:player,arg3:text,arg4:text):
  set {_adminuuid} to uuid of {_p}
  set {_adminlang} to getlangcode({_p})
  set {_prefix} to getlang("prefix",{_adminlang})
  if {_arg4} is "deleteok":
    set {_player} to {_arg3} parsed as offline player
    #
    # > Deletes the island
    deleteisland({_player})
    #
    # > Prints a success message
    set {_msg} to getlang("isadmin_islandofdeleted",{_adminlang})
    replace all "<player>" with "%{_player}%" in {_msg}
    message "%{_prefix}% %{_msg}%" to {_p}
  set {_bedrock} to searchbedrock({_p})
  if y-coordinate of {_bedrock} is -5:
    #
    # > Prints the defined spacers and a message that the island could not be found:
    #
    message "%{SB::config::spacer}%" to {_p}
    set {_msg} to getlang("isinfonotfound",{_adminlang})
    message "%{_prefix}% %{_msg}%" to {_p}
    message "%{SB::config::spacer}%" to {_p}
    stop
  else:
    set {_loc::1} to x-coord of {_bedrock}
    set {_loc::2} to y-coord of {_bedrock}
    set {_loc::3} to z-coord of {_bedrock}
    #
    # > If there is a leader set to this island, create a promt if it should be really deleted
    if {SB::island::%{_loc::1}%_%{_loc::2}%_%{_loc::3}%::leader} is set:
      set {_msg} to getlang("isadmin_suretodeleteisofp",{_adminlang})
      #
      # > Replace the player placeholder with the player.
      replace all "<player>" with "%{_arg3}%" in {_msg}
      set {_prefix} to "%{_prefix}% %{_msg}%"
      set {_msg} to getlang("isadmin_yes",{_adminlang})
      tellrawmsg1({_p},{_prefix},{_msg},"/islandadmin island delete %{SB::island::%{_loc::1}%_%{_loc::2}%_%{_loc::3}%::leader} parsed as offline player% deleteok")

#
# > Function: admintools_addmember
# > Arguments:
# > <player>player,<text>arg3 player as text, <text>confirm argument
# > Actions:
# > Adds a member to an island the admin is standing on. If there is no owner, set the player as owner.
function admintools_addmember(p:player,arg3:text):
  set {_adminuuid} to uuid of {_p}
  set {_adminlang} to getlangcode({_p})
  set {_prefix} to getlang("prefix",{_adminlang})
  set {_player} to {_arg3} parsed as offline player
  set {_uuid} to uuid of {_player}
  set {_bedrock} to {SB::player::%{_uuid}%::island::bedrock}
  if {_bedrock} is set:
    set {_msg} to getlang("alreadyotheris",{_adminlang})
    replace all "<player>" with "%{_player}%" in {_msg}
    message "%{_prefix}% %{_msg}%" to {_p}
    stop
  
  set {_bedrock} to getcurrentbedrock({_p},location of {_p})
  if y-coordinate of {_bedrock} is -5:
    #
    # > Prints the defined spacers and a message that the island could not be found:
    message "%{SB::config::spacer}%" to {_p}
    set {_msg} to getlang("isinfonotfound",{_adminlang})
    message "%{_prefix}% %{_msg}%" to {_p}
    message "%{SB::config::spacer}%" to {_p}
    stop
  else:

    set {_loc::1} to x-coord of {_bedrock}
    set {_loc::2} to y-coord of {_bedrock}
    set {_loc::3} to z-coord of {_bedrock}
    
    #
    # > If everyone on the island has been kicked, a new owner can be added now.
    if {SB::island::%{_loc::1}%_%{_loc::2}%_%{_loc::3}%::leader} is "---":
      set {SB::island::%{_loc::1}%_%{_loc::2}%_%{_loc::3}%::leader} to {_uuid}
    #
    # > If there is no leader, there is no island and should created first.
    else if {SB::island::%{_loc::1}%_%{_loc::2}%_%{_loc::3}%::leader} is not set:
      message "%{SB::config::spacer}%" to {_p}
      set {_msg} to getlang("isinfonotfound",{_adminlang})
      message "%{_prefix}% %{_msg}%" to {_p}
      message "%{SB::config::spacer}%" to {_p}
    #
    # > If a island leader is existing, add the user as a member to the island.
    else:
      add {_uuid} to {SB::island::%{_loc::1}%_%{_loc::2}%_%{_loc::3}%::member::*}

    #
    # > Sets the new bedrock of the player.
    set {SB::player::%{_uuid}%::island::bedrock} to {_bedrock}
  stop

#
# > Function: admintools_kickall
# > Arguments:
# > <player>player,<text>confirm argument, <text>island leader
# > Actions:
# > Kicks all players from the island the player argument is standing on
function admintools_kickall(p:player,arg3:text,arg4:text):
  set {_adminuuid} to uuid of {_p}
  set {_adminlang} to getlangcode({_p})
  set {_prefix} to getlang("prefix",{_adminlang})
  #
  # > "kickok" is a argument which is used by a tellraw prompt to accept if it
  # > should really kick all players on that island.
  if {_arg3} is "kickok":
    #
    # > Set the leader and if the leader is existing, kick everyone from the island
    set {_leader} to {_arg4} parsed as offline player
    if {_leader} is set:
      set {_uuid} to uuid of {_leader}
      set {_bedrock} to {SB::player::%{_uuid}%::island::bedrock}
      set {_locx} to x-coord of {_bedrock}
      set {_locy} to y-coord of {_bedrock}
      set {_locz} to z-coord of {_bedrock}
      #
      # > Loop trough all members and also delete them from the list
      loop {SB::island::%{_locx}%_%{_locy}%_%{_locz}%::member::*}:
        set {_player} to loop-value parsed as offline player
        leaveisland({_player}, "member")
        delete {SB::island::%{_locx}%_%{_locy}%_%{_locz}%::member::%loop-index%}
      leaveisland({_leader}, "owner")
      set {SB::island::%{_locx}%_%{_locy}%_%{_locz}%::leader} to "---"
      set {_msg} to getlang("isadmin_kickall",{_adminlang})
      message "%{_prefix}% %{_msg}%" to {_p}
  set {_bedrock} to searchbedrock({_p})
  if y-coordinate of {_bedrock} is -5:
    #
    # > Prints the defined spacers and a message that the island could not be found:
    #
    message "%{SB::config::spacer}%" to {_p}
    set {_msg} to getlang("isinfonotfound",{_adminlang})
    message "%{_prefix}% %{_msg}%" to {_p}
    message "%{SB::config::spacer}%" to {_p}
  else:
    set {_loc::1} to x-coord of {_bedrock}
    set {_loc::2} to y-coord of {_bedrock}
    set {_loc::3} to z-coord of {_bedrock}
    #
    # > Ask the user if everyone should be kicked, the user has to click on the tellraw prompt
    # > to accept it, it runs another command which is going to kick all members.
    set {_user} to {SB::island::%{_loc::1}%_%{_loc::2}%_%{_loc::3}%::leader} parsed as offline player
    
    #
    # > Create a tellraw if everyone should be kicked from the island
    set {_msg} to getlang("isadmin_kickallprompt",{_adminlang})
    replace all "<player>" with "%{_user}%" in {_msg}
    set {_prefix} to "%{_prefix}% %{_msg}%"
    set {_msg} to getlang("isadmin_yes",{_adminlang})
    tellrawmsg1({_p},{_prefix},{_msg},"/islandadmin island kickall kickok %{_user}%")

#
# > Function: admintools_changebiome
# > Arguments:
# > <player>player,<text>biome name, <text>island player
# > Actions:
# > Changes the biome of island players island. If island player is not set, use the island on which the admin stands on.
function admintools_changebiome(p:player,arg3:text,arg4:text):
  set {_adminuuid} to uuid of {_p}
  set {_adminlang} to getlangcode({_p})
  set {_prefix} to getlang("prefix",{_adminlang})
  set {_player} to {_arg4} parsed as offline player
  if {_player} is not set:
    set {_bedrock} to searchbedrock({_p})
    if y-coordinate of {_bedrock} is -5:
      #
      # > Prints the defined spacers and a message that the island could not be found:
      message "%{SB::config::spacer}%" to {_p}
      set {_msg} to getlang("isinfonotfound",{_adminlang})
      message "%{_prefix}% %{_msg}%" to {_p}
      message "%{SB::config::spacer}%" to {_p}
      stop
  else:
    #
    # > The 4nd argument is valid, set it to the bedrock to get the leader.
    set {_uuid} to uuid of {_player}
    set {_bedrock} to {SB::player::%{_uuid}%::island::bedrock}

  set {_loc::1} to x-coord of {_bedrock}
  set {_loc::2} to y-coord of {_bedrock}
  set {_loc::3} to z-coord of {_bedrock}
  #
  # > Get the leader from the bedrock location variable
  set {_user} to {SB::island::%{_loc::1}%_%{_loc::2}%_%{_loc::3}%::leader} parsed as offline player
  #
  # > Print information to the admin that the biome is changed.
  message "%{SB::config::spacer}%" to {_p}
  set {_a} to getlang("bc_changing",{_adminlang})
  replace all "<biome>" with {_arg3} in {_a}
  message "%{_prefix}% %{_a}%" to {_p}
  message "%{SB::config::spacer}%" to {_p}
  #
  # > Run the function to change the biome.
  changebiome({_user},{_arg3},{_arg3})

#
# > Function: admintools_changebiome
# > Arguments:
# > <player>player,<text>new island leader, <text>confirm message, <text>old islannd leader
# > Actions:
# > Changes the leader of an island with a member of the island.
function admintools_changeleader(p:player,arg3:text,arg4:text,arg5:text):
  set {_adminuuid} to uuid of {_p}
  set {_adminlang} to getlangcode({_p})
  set {_prefix} to getlang("prefix",{_adminlang})
  if {_arg4} is "changeok":
    if {_arg5} is set:
      set {_newowner} to {_arg3} parsed as offline player
      set {_oldowner} to {_arg5} parsed as offline player
      set {_oldowneruuid} to uuid of {_oldowner}
      set {_newowneruuid} to uuid of {_newowner}
      
      #
      # > Checks if the new leader is member of the island from the old leader:
      set {_newownerscurrentleader} to getleader({_newowner})
      if {_newownerscurrentleader} is not {_oldowneruuid}:
        set {_msg} to getlang("isadmin_newleaderhastobemember",{_adminlang})
        message "%{_prefix}% %{_msg}%" to {_p}
        stop
      #
      # > Gets the bedrock of the old leader and takes the locations out to get members later
      set {_bedrock} to {SB::player::%{_oldowneruuid}%::island::bedrock}
      set {_locx} to x-coord of {_bedrock}
      set {_locy} to y-coord of {_bedrock}
      set {_locz} to z-coord of {_bedrock}
      
      #
      # > Changes the leader of this island to the new leader
      set {SB::island::%{_locx}%_%{_locy}%_%{_locz}%::leader} to {_newowneruuid}

      #
      # > Adds the old owner to the members list
      add {_oldowneruuid} to {SB::island::%{_locx}%_%{_locy}%_%{_locz}%::member::*}
      #
      # > Loop trough all members and change it to the new owner
      loop {SB::island::%{_locx}%_%{_locy}%_%{_locz}%::member::*}:
        if loop-value is {_newowneruuid}:
          delete {SB::island::%{_locx}%_%{_locy}%_%{_locz}%::member::%loop-index%}
    
      #
      # > Print the message about the new leader
      set {_msg} to getlang("isadmin_newleader",{_adminlang})
      replace all "<newleader>" with "%{_newowner}%" in {_msg}
      replace all "<oldleader>" with "%{_oldowner}%" in {_msg}
      message "%{_prefix}% %{_msg}%" to {_p}
      stop
  #
  # > If the 4th argument was not "changeok", do the following code:
  set {_bedrock} to searchbedrock({_p})
  if y-coordinate of {_bedrock} is -5:
    #
    # > Prints the defined spacers and a message that the island could not be found:
    message "%{SB::config::spacer}%" to {_p}
    set {_msg} to getlang("isinfonotfound",{_adminlang})
    message "%{_prefix}% %{_msg}%" to {_p}
    message "%{SB::config::spacer}%" to {_p}
  else:
    set {_loc::1} to x-coord of {_bedrock}
    set {_loc::2} to y-coord of {_bedrock}
    set {_loc::3} to z-coord of {_bedrock}
    
    set {_user} to {SB::island::%{_loc::1}%_%{_loc::2}%_%{_loc::3}%::leader} parsed as offline player
    
    #
    # > Prints a promt if the leader should be changed
    set {_msg} to getlang("isadmin_changeleader",{_adminlang})
    replace all "<newleader>" with {_arg3} in {_msg}
    replace all "<oldleader>" with "%{_user}%" in {_msg}
    set {_prefix} to "%{_prefix}% %{_msg}%"
    set {_msg} to getlang("isadmin_yes",{_adminlang})
    tellrawmsg1({_p},{_prefix},{_msg},"/islandadmin island changeleader %{_arg3}% changeok %{_user}%")

#
# > Function: admintools_invite
# > Arguments:
# > <player>player,<text>island leader, <text>player to invite
# > Actions:
# > Invites the player to the island of the island leader.
function admintools_invite(p:player,arg3:text,arg4:text):
  set {_adminuuid} to uuid of {_p}
  set {_adminlang} to getlangcode({_p})
  set {_prefix} to getlang("prefix",{_adminlang})
  #
  # > Set the argument 3 to a offline player (owner)
  set {_o} to {_arg3} parsed as offline player
  if {_o} is a offline player:
    #
    # > The invited player has to be online
    set {_p} to {_arg4} parsed as offline player
    if {_p} is online:
      #
      # > Use the uuid of the player with a local variable
      set {_ouuid} to uuid of {_o}
      #
      # > Check if the owner actually owns a island
      set {_leader} to getleader({_o})
      if {_leader} is set:
        if {_leader} is {_ouuid}:
          set {_arg2} to {_p}
          if {_arg2} is online:
            if {_arg2} is not {_o}:
              set {_p2} to {_arg2}
              set {_tuuid} to uuid of {_p2}
              #
              # > If the invited player is already on an island, print error
              if {SB::player::%{_tuuid}%::island::bedrock} is set:
                set {_msg} to getlang("alreadyotheris",{_adminlang})
                replace all "<player>" with "%{_p2}%" in {_msg}
                message "%{_prefix}% %{_msg}%" to {_p}
                stop
              #
              # > If everything is ok, send a invitation tellraw and wait for x seconds,
              # > then stop it, if not accepted.
              set {_uuid2} to uuid of {_arg2}
              set {_b} to getlang("gotrequest",{SK::lang::%{_uuid2}%})
              message "%{_prefix}% %{SB::lang::sentrequest::%{_adminlang}%}%" to {_p}
              replace all "<player>" in {_b} with "%{_o}%"
              message "%{_prefix}% %{_b}%" to {_p2}
              set {_uuidp2} to uuid of {_p2}
              set {_msg} to getlang("clicktojoin",{SK::lang::%{_uuid2}%})
              replace all "<player>" with "%{_o}%" in {_msg}
              tellrawmsg1({_p2},{_prefix},{_msg},"/is join %{_o}%")
              set {_cooldown} to {SB::config::invitecooldown}
              set {_cooldown} to {_cooldown} parsed as number
              set {Request::%{_arg2}%::%{_o}%} to {_cooldown}
              while {Request::%{_arg2}%::%{_o}%} > 0:
                subtract 1 from {Request::%{_arg2}%::%{_o}%}
                wait a second
              if {Request::%{_arg2}%::%{_o}%} is 0:
                delete {Request::%{_arg2}%::%{_o}%}
                set {_msg} to getlang("reqtoleader",{_adminlang})
                set {_c} to getlang("reqtoleader",{SK::lang::%{_ouuid}%})
                set {_uuid2} to uuid of {_arg2}
                set {_b} to getlang("reqtomember",{SK::lang::%{_uuid2}%})
                #
                # > Sends the message to the admin
                message "%{_prefix}% %{_msg}%" to {_p}
                #
                # > Sends the message to the island leader
                message "%{_prefix}% %{_c}%" to {_o}
                #
                # > Sends the message to the player who has been invited
            else:
              set {_msg} to getlang("cantinviteself",{_adminlang})
              message "%{_prefix}% %{_msg}%" to {_p}
          else:
            set {_msg} to getlang("playeroff",{_adminlang})
            message "%{_prefix}% %{_msg}%" to {_p}
        else:
          set {_msg} to getlang("notleader",{_adminlang})
          message "%{_prefix}% %{_msg}%" to {_p}
      else:
        set {_msg} to getlang("nois",{_adminlang})
        message "%{_prefix}% %{_msg}%" to {_p}
#
# > Function: admintools_create
# > Arguments:
# > <player>player
# > Actions:
# > Creates a island with no leader at the position of the player paremeter.
function admintools_create(p:player):
  #
  # > Set local variables which are needed for messages later.
  set {_uuid} to uuid of {_p}
  set {_lang} to getlangcode({_p})
  set {_prefix} to getlang("prefix",{_adminlang})
  #
  # > Get the current bedrock
  set {_bedrock} to searchbedrock({_p})
  #
  # > If there is already a bedrock, stop here and print error.
  if block at {_bedrock} is bedrock:
    set {_msg} to getlang("at_isalreadyset",{_lang})
    message "%{_prefix}% %{_msg}%" to {_p}
    stop
  #
  # > Set the island center to bedrock.
  set block at {_bedrock} to bedrock
  #
  # > Get local variables of the coordinates of the bedrock to set the new variables.
  set {_x} to x-coord of {_bedrock}
  set {_y} to y-coord of {_bedrock}
  set {_z} to z-coord of {_bedrock}
  #
  # > If a leader is already set to the coordinates, check if it is empty.
  if {SB::island::%{_x}%_%{_y}%_%{_z}%::leader} is set:
    if {SB::island::%{_x}%_%{_y}%_%{_z}%::leader} is not "" or "---":
      #
      # > If there is already a owner set for this island/bedrock, stop here and print error.
      set {_msg} to getlang("at_isalreadyset",{_lang})
      message "%{_prefix}% %{_msg}%" to {_p}
      stop
  else:
    #
    # > There is nobody set to this island, create a new one with a empty leader.
    set {SB::island::%{_x}%_%{_y}%_%{_z}%::leader} to "---"
    set {SB::island::%{_x}%_%{_y}%_%{_z}%::level} to 1
    set {SB::island::%{_x}%_%{_y}%_%{_z}%::exp} to 0
    set {SB::island::%{_x}%_%{_y}%_%{_z}%::created} to now
    set {SB::islvl::%{_x}%_%{_y}%_%{_z}%} to 0
    #
    # > Print success message.
    set {_msg} to getlang("at_isnowset",{_lang})
    message "%{_prefix}% %{_msg}%" to {_p}
