#
# ==============
# islandmember.sk
# ==============
# islandmember.sk is part of the SKYBLOCK.SK functions.
# ==============

# > Function - islandmember:
# > Arguments:
# > <player>player, <text>action, <text>target (empty = "1")
# > Actions:
# > The islandmember function can do:
# > - *invite* the target to the island of the player
# > - let the player *join* the island of the target
# > - *leave* the island of the player
# > - *kick* kick target player from player's island
# > Available action parameters: "invite", "join", "leave", "kick"
function islandmember(p:player,a:text,target:text="1"):
  #
  # > Set frequently used variables.
  set {_uuid} to uuid of {_p}
  set {_site} to {_site} parsed as integer
  set {_lang} to getlangcode({_p})
  set {_prefix} to getlang("prefix",{_lang})
  #
  # > If a player is invited to the island.
  if {_a} is "invite":
    #
    # > Only invite players if the player is on a island.
    if {SB::player::%{_uuid}%::island::bedrock} is set:
      set {_leader} to getleader({_p})
      #
      # > Only invite players, if the player paremeter is the leader of the island.
      if {_leader} is {_uuid}:
        set {_target} to {_target} parsed as offline player
        #
        # > Only invite online players.
        if {_target} is online:
          #
          # > Only invite player, if it is not the leader himself.
          if {_target} is not {_p}:
            set {_p2} to {_target}
            set {_tuuid} to uuid of {_p2}
            #
            # > Only invite, if the target player is not already on an island.
            if {SB::player::%{_tuuid}%::island::bedrock} is set:
              set {_msg} to getlang("alreadyotheris",{_lang})
              replace all "<player>" with "%{_p2}%" in {_msg}
              message "%{_prefix}% %{_msg}%" to {_p}
              stop
            #
            # > If we're here, send the invite message and a clickable tellraw message.
            set {_b} to getlang("gotrequest",getlangcode({_target}))
            set {_msg} to getlang("sentrequest",{_lang})
            message "%{_prefix}% %{_msg}%" to {_p}
            replace all "<player>" in {_b} with "%{_p}%"
            message "%{_prefix}% %{_b}%" to {_p2}
            set {_uuidp2} to uuid of {_p2}
            set {_msg} to getlang("clicktojoin",getlangcode({_target}))
            replace all "<player>" with "%{_p}%" in {_msg}
            tellrawmsg1({_p2},{_prefix},{_msg},"/is join %{_p}%")
            set {_cooldown} to {SB::config::invitecooldown}
            set {_cooldown} to {_cooldown} parsed as number
            set {SB::request::%{_target}%::%{_p}%} to {_cooldown}
            #
            # > Give a limited time for invites.
            while {SB::request::%{_target}%::%{_p}%} > 0:
              subtract 1 from {SB::request::%{_target}%::%{_p}%}
              wait a second
            #
            # > If the request variable is 0.
            if {SB::request::%{_target}%::%{_p}%} is 0:
              delete {SB::request::%{_target}%::%{_p}%}
              set {_msg} to getlang("reqtoleader",{_lang})
              set {_msg1} to getlang("reqtomember",getlangcode({_target}))
              message "%{_prefix}% %{_msg}%" to {_p}
              message "%{_prefix}% %{_msg1}%" to {_p2}
          #
          # > The player tried to invite himself.
          else:
            set {_msg} to getlang("cantinviteself",{_lang})
            message "%{_prefix}% %{_msg}%" to {_p}
        #
        # > The player tried to invite a offline player.
        else:
          set {_msg} to getlang("playeroff",{_lang})
          message "%{_prefix}% %{_msg}%" to {_p}
      #
      # > The player is not the leader.
      else:
        set {_msg} to getlang("notleader",{_lang})
        message "%{_prefix}% %{_msg}%" to {_p}
    #
    # > The player doesn't have a island.
    else:
      set {_msg} to getlang("nois",{_lang})
      message "%{_prefix}% %{_msg}%" to {_p}
  #
  # > If the player wants to join an island.
  if {_a} is "join":
    #
    # > Set the target island player to a offline player.
    set {_target} to {_target} parsed as offline player
    #
    # > If there is no target parameter, list all requests for this player and send tellraw.
    if {_target} is "1":
      loop {SB::request::%{_p}%::*}:
        set {_tplayer} to loop-index parsed as offline player
        set {_msg} to getlang("clicktojoin",{_lang})
        replace all "<player>" with "%{_tplayer}%" in {_msg}
        tellrawmsg1({_p},{_prefix},{_msg},"/is join %{_tplayer}%")
      #
      # > If the size of the request list is 0, the player has no invites.
      if size of {SB::request::%{_p}%::*} is 0:
        set {_msg} to getlang("norequest",{_lang})
        message "%{_prefix}% %{_msg}%" to {_p}
      stop
    #
    # > If a target is a valid player.
    else if {_target} is a player:
      #
      # > Check, if the target has sent a invitation.
      if {SB::request::%{_p}%::%{_target}%} is set:
      #
        # > If the player who wants to join is already on an island,
        # > send a message that the player has to delete/leave his island first.
        if {SB::player::%{_uuid}%::island::bedrock} is set:
          set {_msg} to getlang("alreadyis",{_lang})
          message "%{_prefix}% %{_msg}%" to {_p}
          set {_check} to getleader({_p})
          if {_check} is {_uuid}:
            set {_msg} to getlang("havetodelete",{_lang})
            message "%{_prefix}% %{_msg}%" to {_p}
          else:
            set {_msg} to getlang("havetoleave",{_lang})
            message "%{_prefix}% %{_msg}%" to {_p}
        #
        # > If the island is not on an island and is invited, join the island.
        else:
          set {_uuid2} to uuid of {_target}
          set {_loc} to {SB::player::%{_uuid2}%::island::bedrock}
          set {_bedrockloc} to "%x-coord of {_loc}%_%y-coord of {_loc}%_%z-coord of {_loc}%"
          add {_uuid} to {SB::island::%{_bedrockloc}%::member::*}
          set {_joinuuid} to {_uuid}
          set {SB::player::%{_uuid}%::island::bedrock} to {SB::player::%{_uuid2}%::island::bedrock}
          delete {SB::request::%{_p}%::%{_target}%}
          make {_p} execute command "/is home"
          set {_msg} to getlang("joinedismember",{_lang})
          set {_msg1} to getlang("joinedisleader",getlangcode({_target}))
          replace all "<arg-2>" with "%{_target}%" in {_msg}
          replace all "<player>" with "%{_p}%" in {_msg1}
          message "%{_prefix}% %{_msg}%" to {_p}
          set {_p2} to {_target}
          message "%{_prefix}% %{_msg1}%" to {_p2}
      #
      # > The target island leader has not sent a request.
      else:
        set {_msg} to getlang("norequest",{_lang})
        message "%{_prefix}% %{_msg}%" to {_p}
    #
    # > The target is not a valid player.
    else:
      set {_msg} to getlang("invitetargeterror",{_lang})
      message "%{_prefix}% %{_msg}%" to {_p}
  #
  # > The player wants to leave the island.
  if {_a} is "leave":
    #
    # > Let the player only leave the island if there is a island to leave.
    if {SB::player::%{_uuid}%::island::bedrock} is not set:
      set {_msg} to getlang("nois",{_lang})
      message "%{_prefix}% %{_msg}%" to {_p}
    else:
      #
      # > Doesn't allow the leader to leave the island.
      set {_leader} to getleader({_p})
      if {_leader} is {_uuid}:
        set {_msg} to getlang("leaderleaveinfo",{_lang})
        message "%{_prefix}% %{_msg}%" to {_p}
      #
      # > If the player is not a leader, the player can leave.
      else:
        set {_msg} to getlang("leftis",{_lang})
        message "%{_prefix}% %{_msg}%" to {_p}
        leaveisland({_p}, "member")
  #
  # > If the player wants to kick the target.
  if {_a} is "kick":
    #
    # > To kick someone, the player first needs an island.
    if {SB::player::%{_uuid}%::island::bedrock} is not set:
      set {_msg} to getlang("nois",{_lang})
      message "%{_prefix}% %{_msg}%" to {_p}
    else:
      #
      # > Check if the executor is the island leader.
      set {_leader} to getleader({_p})
      if {_leader} is {_uuid}:
        set {_target} to {_target} parsed as offline player
        #
        # > If the target is a valid player.
        if {_target} is a player:
          #
          # > Delete the player from the island and use the leaveisland function.
          set {_uuid} to uuid of {_target}
          set {_loc} to {SB::player::%{_uuid}%::island::bedrock}
          set {_bedrockloc} to "%x-coord of {_loc}%_%y-coord of {_loc}%_%z-coord of {_loc}%"
          loop {SB::island::%{_bedrockloc}%::member::*}:
            if loop-value is uuid of {_target}:
              delete {SB::island::%{_bedrockloc}%::member::%loop-index%}
              set {_msg} to getlang("kickmemberleader",{_lang})
              set {_msg1} to getlang("kickmember",{_lang})
              replace all "<arg-2>" with "%{_target}%" in {_msg}
              replace all "<player>" with "%{_p}%" in {_msg1}
              message "%{_prefix}% %{_msg}%" to {_p}
              message "%{_prefix}% %{_msg1}%" to {_target}
              leaveisland({_target}, "member")
              stop
          set {_msg} to getlang("plnotfound",{_lang})
          replace all "<player>" with {_target} in {_msg}
          message "%{_prefix}% %{_msg}%" to {_p}
        #
        # > The target is not a valid player.
        else:
          set {_msg} to getlang("invitetargeterror",{_lang})
          message "%{_prefix}% %{_msg}%" to {_p}
      #
      # > The player is not the leader and not allowed to kick players.
      else:
        actionload({_p},getlang("noperm",{_lang}))
