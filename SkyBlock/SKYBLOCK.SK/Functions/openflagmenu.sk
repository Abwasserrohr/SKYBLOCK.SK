#
# ==============
# openflagmenu.sk
# ==============
# openflagmenu.sk is part of the SKYBLOCK.SK functions.
# ==============

# > Function - openflagmenu:
# > Arguments:
# > <player>player
# > Actions:
# > Opens the flags for the player to change, if enabled in config.sk
function openflagmenu(p:player,type:text):
  #
  # > Get the uuid of the player and set it to a local variable.
  set {_uuid} to uuid of {_p}

  #
  # > Get the language of the player in a local variable.
  set {_lang} to getlangcode({_p})
  
  #
  # > If there is no type set, open a menu where the player can select, on which type of
  # > player the flags should apply. The player can select between foreign, trusted and island member.
  if {_type} is "":
    opengui({_p},27,getlang("flag_flagst",{_lang},"&l"),chest inventory)
    #
    # > Empty slots are shown as black stained glass.
    loop 27 times:
      set slot loop-number - 1 of {_p}'s current inventory to black stained glass pane named " "
      protectslot({_p},loop-number - 1)

    setguiitem({_p},11,farmland,1,getlang("flag_foreignt",{_lang},"&r"),getlang("flag_foreignd",{_lang}),"openflagmenu(""%{_p}%"" parsed as player,""foreign"")",false)
    setguiitem({_p},13,grass path,1,getlang("flag_trustedt",{_lang},"&r"),getlang("flag_trustedd",{_lang}),"openflagmenu(""%{_p}%"" parsed as player,""trusted"")",false)
    setguiitem({_p},15,grass,1,getlang("flag_membert",{_lang},"&r"),getlang("flag_memberd",{_lang}),"openflagmenu(""%{_p}%"" parsed as player,""member"")",false)
    #
    # > This item allows the user to go into the previous menu.
    setguiitem({_p},26,{SB::config::backguiitem},1,getlang("guibacktopreviousmenu",{_lang}),getlang("guibacktopreviousmenulore",{_lang}),"make ""%{_p}%"" parsed as player execute command ""/is""",true)
    stop

  #
  # > Set the prefix for messages into the local variable {_prefix}.
  set {_prefix} to getlang("prefix",{_lang})

  #
  # > Get the bedrock of the player who executed the command.
  set {_bedrock} to {SB::player::%{_uuid}%::island::bedrock}
  #
  # > Get the x, y and z-coordinates of the bedrock to use the variables.
  set {_x} to x-coordinate of {_bedrock}
  set {_y} to y-coordinate of {_bedrock}
  set {_z} to z-coordinate of {_bedrock}
  #
  # > Check, if the player who executed the command is also the leader of the island.
  if {SB::island::%{_x}%_%{_y}%_%{_z}%::leader} is {_uuid}:
    #
    # > Set the slots to a default size of 54.
    set {_slots} to 54
    #
    # > Open the flags menu.
    set {_menuheader} to getlang("flag_%{_type}%t",{_lang},"&l")
    opengui({_p},{_slots},"&l%{_menuheader}%")
    #
    # > Empty slots are shown as black stained glass.
    loop {_slots} times:
      set slot loop-number - 1 of {_p}'s current inventory to black stained glass pane named " "
      protectslot({_p},loop-number - 1)

    #
    # > Set {_i} to 10, to order the items in the menu right.
    set {_i} to 10
    loop {SB::config::defaultisflag::%{_type}%::*}:

      #
      # If the custom flag is set, set it to a local variable, if not, take the default configuration.
      if {SB::island::%{_x}%_%{_y}%_%{_z}%::flag::%{_type}%::%loop-index%} is set:
        set {_boolean} to {SB::island::%{_x}%_%{_y}%_%{_z}%::flag::%{_type}%::%loop-index%}
      else:
        set {_boolean} to loop-value
      #
      # > Set a lore which is added to the menu item.
      set {_loremsg1} to getlang("flag_%loop-index%d",{_lang})
      set {_currentstate} to getlang("flag_current%{_boolean}%",{_lang})
      set {_currentsetting} to getlang("flag_currentsetting",{_lang})
      set {_toggleflagstrue} to getlang("flag_toggleflagstrue",{_lang})
      set {_toggleflagsfalse} to getlang("flag_toggleflagsfalse",{_lang})
      if {SB::config::toggleflags} is true:
        set {_lore} to "%{_loremsg1}%\n%{SB::config::guispacer}%\n%{_currentsetting}%%{_currentstate}%\n%{SB::config::guispacer}%\n%{_toggleflagstrue}%"
      else:
        set {_lore} to "%{_loremsg1}%\n%{SB::config::guispacer}%\n%{_currentsetting}%%{_currentstate}%\n%{SB::config::guispacer}%\n%{_toggleflagsfalse}%"

      #
      # > Set either green glass panes or red glass panes for true and false and then set the item.
      # > The items have translation text as variable and also execute the "toggleflag" function onn click.
      if {_boolean} is true:
        setguiitem({_p},{_i},green glass pane,1,getlang("flag_%loop-index%t",{_lang}),"&r%{_lore}%","toggleflag(""%{_p}%"" parsed as player,""%loop-index%"",""%{_type}%"")",false)
      if {_boolean} is false:
        setguiitem({_p},{_i},red glass pane,1,getlang("flag_%loop-index%t",{_lang}),"&r%{_lore}%","toggleflag(""%{_p}%"" parsed as player,""%loop-index%"",""%{_type}%"")",false)
      #
      # > Add 1 to {_i} to place the items in the slots in the right order.
	  # > If the loop amount is over 7, add 2 to {_i} and set tthe loop amount back to 0.
      add 1 to {_loopamount}
      if {_loopamount} is 7:
        set {_loopamount} to 0
        add 3 to {_i}
      else:
        add 1 to {_i}
    #
    # > Set the back item to let the player go back to the previous menu.
    setguiitem({_p},53,{SB::config::backguiitem},1,getlang("guibacktopreviousmenu",{_lang}),getlang("guibacktopreviousmenulore",{_lang}),"make ""%{_p}%"" parsed as player execute command ""/is flags""",true)
  else:
    set {_msg} to getlang("notleader",{_lang})
    message "%{_prefix}% %{_msg}%" to {_p}

# > Function - toggleflag:
# > Arguments:
# > <player>player,<text>flag,<text>type (foreign,trusted,member)
# > Actions:
# > Toggles a flagg for the specific type of player.
function toggleflag(p:player, flag:text, type:text):
  #
  # > Check if the flags can be toggled.
  if getconfigobject("toggleflags") is true:
    #
	# > Only allow to toggle this flag if it has been enabled for it.
    if {SB::config::defaultisflag::%{_type}%::toggle-%{_flag}%} is true:
      #
      # > Get the uuid of the player and set it to a local variable.
      set {_uuid} to uuid of {_p}
      #
      # > Get the bedrock of the player who executed the command.
      set {_bedrock} to {SB::player::%{_uuid}%::island::bedrock}
      #
      # > Get the x, y and z-coordinates of the bedrock to use the variables.
      set {_x} to x-coordinate of {_bedrock}
      set {_y} to y-coordinate of {_bedrock}
      set {_z} to z-coordinate of {_bedrock}
      #
      # > Get the current flag setting.
      set {_flagsetting} to {SB::island::%{_x}%_%{_y}%_%{_z}%::flag::%{_type}%::%{_flag}%}
      #
      # > If the flag setting is not set, use the default setting.
      if {_flagsetting} is not set:
        set {_flagsetting} to {SB::config::defaultisflag::%{_type}%::%{_flag}%}
      #
      # > Toggle the setting.
      if {_flagsetting} is true:
        set {SB::island::%{_x}%_%{_y}%_%{_z}%::flag::%{_type}%::%{_flag}%} to false
      if {_flagsetting} is false:
        set {SB::island::%{_x}%_%{_y}%_%{_z}%::flag::%{_type}%::%{_flag}%} to true
  #
  # > Reopen the flag menu.
  openflagmenu({_p},{_type})
