#
# ==============
# jetboots.sk v0.0.5
# ==============
# Let users craft jetboots, which can be used to fly around. They need fuel to fly.
# ==============
# Dependencies
# ==============
# > Spigot - https://hub.spigotmc.org/jenkins/job/BuildTools/
# > Skript by bensku - https://github.com/SkriptLang/Skript/releases
# > actionbar.sk - https://github.com/Abwasserrohr/SKYBLOCK.SK/raw/master/SkyBlock/SKYBLOCK.SK/Functions/actionbar.sk
# ==============
# How to use it:
# ==============
# > This skript doesn't need any setup on server side.
# > First use: Place jetboots.sk into your "plugins/Skript/scripts/" folder and restart. Subfolders are possible too.
# > Steps for users:
# > Craft this recipe:
# >      air      |   air   |      air
# > diamond block | feather | diamond block
# > diamond block | feather | diamond block
# > Wear the shoes and then fly around, you may
# > have to fill the up with coal while waring them.
# > Simply click with coal in your hand to fill them up.

#
# > If you change these options, might be necessary,
# > JetBoots, which are already in the game are not
# > going to work anymore, if you change the item_name.
options:
  #
  # > Defines how the item should be named:
  item_name: "&eJetBoots"
  #
  # > Defines, how much the fuel should fill up the boots, every second, 20 fuel gets used.
  fuelworth: 20
  #
  # > Defines the speed of the boots.
  flyspeed: 0.04
  #
  # > Default translation, if no SkyBlock translation is available.
  fillinfo: "Fill &eJetBoots&r up with coal while wearing them."
  emptyinfo: "Your &eJetBoots&r are empty!"
  loadedinfo: "Your &eJetBoots&r have been filled up."
  actionbar: &8[&6&lJetBoots&8] &8>> [&r<fuel>&8]

#
# > Event - on load
# > Action:
# > Once this file is loaded by skript, the JetBoots get registered as a crafting recipe.
# > Also, if there is a old jetboots list left, delete it.
on load:
  set {_item} to diamond boots of mending
  set name of {_item} to {@item_name}
  set line 1 of lore of {_item} to {@item_name}
  set line 2 of lore of {_item} to "&r0"
  register new shaped recipe for {_item} using air, air, air, diamond block, feather, diamond block, diamond block, feather, diamond block

#
# > Event - on craft
# > Action:
# > If the player has crafted a recipe which contains the defined item name
# > in the first line of the lore, give the player information on how to fill them.
on craft:
  if line 1 of lore of event-item is {@item_name}:
    set {_lang} to {SK::lang::%uuid of player%}
    #
    # > Print predefined message, if no translation is available.
    if {SB::lang::jetboots::fi::%{_lang}%} is not set:
      message {@fillinfo}
    else:
      message "%{SB::lang::prefix::%{_lang}%}% %{SB::lang::jetboots::fi::%{_lang}%}%"

#
# > Import Java classes from bukkit to use particle effects for the JetBoots in the jetparticle function.
import:
  org.bukkit.Particle
  org.bukkit.Effect

#
# > Event - on gamemode change to survival
# > Actions:
# > If the player is wearing the jetboots and the gamemode changes,
# > reapply the jetboots functions.
on gamemode change to survival:
  if line 1 of lore of player's boots is {@item_name}:
    jetboots(player)

#
# > Event - on inventory click
# > Actions:
# > If the player clicks and the event item is either diamond boots or the
# > event-slot is the boots slot, check for the lore of the boots the
# > player is currently wearing, if they're valid jetboots, call the
# > jetboots function.
on inventory click:
  if event-item is diamond boots:
    set {_check} to true
  else if event-slot is player's boots:
    set {_check} to true
  if {_check} is true:
    wait 2 ticks
    if line 1 of lore of player's boots is {@item_name}:
      jetboots(player)

#
# > Event - on quit
# > Actions:
# > If the player leaves the server, delete the metadata value for the jetboots
# > from the player to stop while loops.
on quit:
  delete metadata value "jetboots" of player

#
# > Event - on join
# > Actions:
# > If the player is joining and wearing jetboots, call jetboots function.
on join:
  if line 1 of lore of player's boots is {@item_name}:
    jetboots(player)

#
# > Event on rightclick holding diamond boots
# > Actions:
# > If the player is rightclicking with diamond boots,
# > check if these are jetboots, if they are, call the
# > jetboots function.
on rightclick holding diamond boots:
  wait 1 tick
  if line 1 of lore of player's boots is {@item_name}:
    jetboots(player)

#
# > Function - jetboots
# > Parameters:
# > <player>the player who is wearing jetboots
# > Actions:
# > Allows the player to fly with the jetboots. Stops the flying automatically
# > if the player has no fuel or removes the jetboots from the boots inventory slot.
function jetboots(player:player):
  #
  # > The uuid of the player is needed for messages.
  set {_uuid} to uuid of {_player}
  #
  # > Wait a tick 
  wait 1 tick
  #
  # > Make the player fly at a specified fly speed.
  set {_player}'s flight mode to true
  set {_player}'s fly speed to {@flyspeed}
  #
  # > Set the metadata value "jetboots" of the player to the current timestamp,
  # > if the timestamp changes, running while loops are going to stop.
  set {_now} to now
  set metadata value "jetboots" of {_player} to {_now}
  while line 1 of lore of {_player}'s boots is {@item_name}:
    #
    # > If the temporary saved timestamp isn't the one which is set
    # > to the metadata of the player, then stop the while loop.
    if {_now} is not metadata value "jetboots" of {_player}:
      stop loop
    #
    # > Before every while loop, wait 1 tick.
    wait 1 tick
    #
    # > Remove fuel from the JetBoots if the player is flying and
    # > update the actionbar of the player.
    if {_player} is flying:
      set {_lore} to line 2 of lore of {_player}'s boots
      replace all "&r" with "" in {_lore}
      set {_lore} to {_lore} parsed as integer
      if {_lore} > 500:
        set {_display} to "{@actionbar}"
        replace all "<fuel>" with "%{_lore}%" in {_display}
        actionbar({_player},"%{_display}%")
      #
      # > Make the actionbar colored red and fat, if it is below 500.
      else:
        set {_display} to "{@actionbar}"
        replace all "<fuel>" with "&4&l%{_lore}%" in {_display}
        actionbar({_player},"%{_display}%")
      if {_lore} <= 0:
        #
        # > If the lore is 0 or lower, print info to the player and stop flying.
        set {_lang} to {SK::lang::%{_uuid}%}
        #
        # > Print predefined messages, if no translation is available.
        if {SB::lang::jetboots::ei::%{_lang}%} is not set:
          message {@emptyinfo} to {_player}
        else:
          message "%{SB::lang::prefix::%{_lang}%}% %{SB::lang::jetboots::ei::%{_lang}%}%" to {_player}
        if {SB::lang::jetboots::fi::%{_lang}%} is not set:
          message {@fillinfo} to {_player}
        else:
          message "%{SB::lang::prefix::%{_lang}%}% %{SB::lang::jetboots::fi::%{_lang}%}%" to {_player}
        set {_player}'s flight mode to false
        set {_player}'s fly speed to 0.08
        delete metadata value "jetboots" of {_player}
        stop
      #
      # > Check if the player is allowed to fly with the JetBoots at the center of the current island.
      set {_allowed} to checkislandaccess({_player},getcurrentbedrock({_player},location of {_player}),"jetboots")
      #
      # > If the player isn't allowed to fly, maybe only because the payer is above or below the
      # > own island, check if the player is on/below y-coordinate 0 or on/above y-coord 255.
      if {_allowed} is false:
        if y-coord of {_p} <= 0:
          set {_allowed} to true
        if y-coord of {_p} >= 255:
          set {_allowed} to true
      if {_allowed} is false:
        set {_player}'s flight mode to false
        set {_lang} to {SK::lang::%{_uuid}%}
        message "%{SB::lang::prefix::%{_lang}%}% %{SB::lang::flag::errorfalse::%{_lang}%}%" to {_player}
        actionbar({_player},"&4%{SB::lang::flag::errorfalse::%{_lang}%}%")
        wait 1 tick
        set {_player}'s flight mode to true
      #
      # > Spawn some jet particles using the jetparticle function.
      jetparticle({_player})
      remove 1 from {_lore}
      set line 2 of lore of {_player}'s boots to "&r%{_lore}%"
  #
  # > If the while loop ends, disable flying for player,
  # > this happens, if the player takes the JetBoots off while
  # > flying in the air.
  delete metadata value "jetboots" of {_player}
  set {_player}'s flight mode to false
  set {_player}'s fly speed to 0.08

#
# > Function - jetparticle
# > Parameters - <player>player
# > Actions:
# > Spawn particles for JetBoots.
function jetparticle(p:player):
  set {_l} to location of {_p}
  set {_x} to x-coord of {_l}
  set {_y} to y-coord of {_l}
  set {_z} to z-coord of {_l}
  set {_world} to {_p}'s world
  {_world}.spawnParticle(Particle.EXPLOSION_NORMAL!,{_x},{_y},{_z}, 0.5)

#
# > Event - on rightclick holding coal
# > Actions:
# > If the player is rightclicking while holding coal and the player is wearing JetBoots,
# > the coal gets removed from the inventory of the player and added as fuel to the JetBoots.
on rightclick holding coal:
  if player's boots is set:
    if line 1 of lore of player's boots is {@item_name}:
      set {_lore} to line 2 of lore of player's boots
      replace all "&r" with "" in {_lore}
      set {_lore} to {_lore} parsed as integer
      set {_fuel} to number of coal in player's inventory
      remove {_fuel} of coal from player's inventory
      set {_fuelbonus} to {_fuel} * {@fuelworth}
      add {_fuelbonus} to {_lore}
      set line 2 of lore of player's boots to "&r%{_lore}%"
      set {_lang} to {SK::lang::%uuid of player%}
      #
      # > Print predefined message, if no translation is available.
      if {SB::lang::jetboots::li::%{_lang}%} is not set:
        message {@loadedinfo}
      else:
        message "%{SB::lang::prefix::%{_lang}%}% %{SB::lang::jetboots::li::%{_lang}%}%"
