
import: 
  org.bukkit.Bukkit

option nms:
  get: 
    set {_nms version} to Bukkit.getServer().getClass().getPackage().getName().split("\.")[3]
    return "net.minecraft.server.%{_nms version}%"
    
option bukkitv:
  get:
    return Bukkit.getServer().getClass().getPackage().getName().split("\.")[3]

    
import:
  org.bukkit.craftbukkit.{@bukkitv}.inventory.CraftItemStack
  {@nms}.MojangsonParser
  {@nms}.NBTTagCompound
  {@nms}.NBTTagString
  org.bukkit.entity.EntityType
  org.bukkit.World
  org.bukkit.Material
  org.bukkit.inventory.ItemStack
  org.bukkit.util.EulerAngle
  org.bukkit.event.player.PlayerArmorStandManipulateEvent 
  org.bukkit.Particle
  org.bukkit.Effect
  org.bukkit.Color
  org.bukkit.event.player.PlayerInteractEntityEvent


  
options:
  #
  # > Define the item which should be given to the player. This item
  # > can be placed to get a robot. Do not change this later, this breaks
  # > existing items.
  robotitem: observer
  #
  # > Define if the robot should need fuel to work. [true = needs fuel|false = no fuel]
  fuel: false
  #
  # > Set the item which should be used as fuel, if you enabled fuel.
  fuelitem: coal
  #
  # > Set the amount of blocks that can be broken with each fuel item before another one is needed.
  breaksperfuel: 5
  #
  # > Set the name of the robot, which should appear above it. Do no change this later
  # > because it breaks existing robots.
  robotname: &e&lRobo
  #
  # > Lore indefinifer, this defines how the robot item should be identified as a robot item.
  # > Do not change this later because this breaks existing robot blocks.
  robotitemlore: &e&lRobo
  #
  # > Define particles which should appear if the robot gets called.
  # > Use the bukkit particle class for this setting: https://hub.spigotmc.org/javadocs/spigot/org/bukkit/Particle.html
  summonparticles: EXPLOSION_NORMAL
  #
  # > Define the particles which should appear if the robot appeared at the right place.
  # > Use the bukkit particle class for this setting: https://hub.spigotmc.org/javadocs/spigot/org/bukkit/Particle.html

  arriveparticles: EXPLOSION_NORMAL
  #
  # > Define the sound which should play once a robot is summoned.
  # > Use vanilla Minecraft names.
  summonsound: block.beacon.activate
  #
  # > Define a sound which should play once the robot arrived at
  # > the final location.
  arrivesound: block.beacon.power_select
  #
  # > Should the robot start instantly working once it arrived?
  # > [true = start instantly|false = off by default]
  instantstart: true
  #
  # > Set here blocks, that should not be broken by the robots,
  # > later, a whitelist for blocks is specified for each job.
  disallowedblocks: air or bedrock or dirt or grass or coarse dirt or podzol or water or lava or obsidian
  #
  # > Fallback translations - If everything works fine, robot.sk uses
  # > the translation variables from SKYBLOCK.SK to have custom
  # > languages. If robot.sk is used without SKYBLOCK.SK, these
  # > options are used as fallback.
  roboton: &r&7[&e&lON&r&7]
  robotoff: &r&7[&e&lOFF&r&7]
  currentdesign: &rCurrent Design
  currentjob: &rCurrent Job
  robotstatuson: &rRobot &r&7[&e&lON&r&7]
  robotstatusoff: &rRobot &r&7[&e&lOFF&r&7]
  clicktotogglesstatus: Click, to toggle\nthe robot between\non and off.
  stats: &rStats
  blocksbroken: &rBlocks broken: <blocks>
  robotjobguiname: &lRobot Jobs
  robotdesignguiname: &lRobot Designs
  robotguiname: &lRobot Menu
  prefix: &7[&6Robots&7] 
  renamedrobot: The robot has been renamed.
  onlyrobotownererror: Only the owner of the robot can rename it.
  renametitle: &rRename
  renamelore: &7Rename this robot\n&7with /robotname <name>.


on load:
  if {SB::config::backguiitem} is not set:
    set {SB::config::backguiitem} to redstone block
  if {SB::config::color::secondary::1} is not set:
    set {SB::config::color::secondary::1} to "&7"
  #
  # > Jobs:
  # > Configure the jobs as you want, you could also add more
  # > jobs by adding them to the skript. Feel free to create a pull request for
  # > this skript on GitHub (https://github.com/Abwasserrohr/SKYBLOCK.SK)
  
  #
  # > This name and lore is displayed in the job selection menu.
  # > The job can be changed for every language in the languages file
  # > of SKYBLOCK.SK. This is also possible with the lore below.
  # > These settings are for the English fallback setting.
  # > Please change names and lores in the language files.
  #set {SB::robot::job::name::en::1} to "Miner"
  #set {SB::robot::job::lore::en::1} to "Mines the blocks in front of it."
  #
  # > The tool the robot should have if it is doing this job.
  set {SB::robot::job::tool::1} to 1 of diamond pickaxe
  #
  # > Set the animation time higher to make the animation less fluent.
  # > Setting this value higher makes the robot less resource intensive.
  # > It can't be set lower than 1, 1 is the most fluent animation.
  set {SB::robot::job::ticks::1} to 1
  #
  # > Set the time how long one cycle takes, every cycle, the job is going
  # > to be done, eg. mining a block. Increasing this value will increase the
  # > speed of the robot.
  set {SB::robot::job::movespeed::1} to 0.15

  #set {SB::robot::job::name::en::2} to "Treecutter"
  #set {SB::robot::job::lore::en::2} to "The treecutter cuts trees in front of it."
  set {SB::robot::job::tool::2} to 1 of diamond axe
  set {SB::robot::job::ticks::2} to 1
  set {SB::robot::job::movespeed::2} to 0.15

  #
  # > Designs:
  # > Set custom designs which can be changed by the user.
  
  #
  # > This name is displayed in the design selection menu.
  # > The design can be named for every language in the languages file
  # > of SKYBLOCK.SK. This is also possible with the lore below.
  # > These settings are for the English fallback setting.
  #set {SB::robot::design::name::en::1} to "Sheep"
  #
  # > This lore is displayed in the design selection menu.
  #set {SB::robot::design::lore::en::1} to "The sheep robot."
  #
  # > Define here the armor the robot should wear. Use the items which are defined
  # > in the material class of bukkit: https://hub.spigotmc.org/javadocs/spigot/org/bukkit/Material.html
  set {SB::robot::design::leggings::1} to Material.LEATHER_LEGGINGS!
  set {SB::robot::design::boots::1} to Material.LEATHER_BOOTS!
  set {SB::robot::design::chestplate::1} to Material.LEATHER_CHESTPLATE!
  #
  # > Set the head as you want, you can also use custom player heads, if they're within a
  # > item variable. Or use a function which creates them.
  set {SB::robot::design::helmet::1} to getcustomhead("Sheep","eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvN2NhMzhjY2Y0MTdlOTljYTlkNDdlZWIxNWE4YTMwZWRiMTUwN2FhNTJiNjc4YzIyMGM3MTdjNDc0YWE2ZmUzZSJ9fX0=")
  #
  # > If you want to have leather armor colored, you can define the color here.
  # > Colored armor: [true = enabled|false = disabled]
  set {SB::robot::design::color::1} to true
  set {SB::robot::design::rgb::1} to Color.fromRGB(255, 255, 255)

  #set {SB::robot::design::name::en::2} to "Golem"
  #set {SB::robot::design::lore::en::2} to "The Golem robot."
  set {SB::robot::design::leggings::2} to Material.LEATHER_LEGGINGS!
  set {SB::robot::design::boots::2} to Material.LEATHER_BOOTS!
  set {SB::robot::design::chestplate::2} to Material.LEATHER_CHESTPLATE!
  set {SB::robot::design::helmet::2} to getcustomhead("Golem","eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvMWM2Y2Q3MjAyYzM0ZTc4ZjMwNzMwOTAzNDlmN2Q5NzNiMjg4YWY1ZTViNzMzNGRkMjQ5MDEwYjNmMjcwNzhmOSJ9fX0=")
  set {SB::robot::design::color::2} to true
  set {SB::robot::design::rgb::2} to Color.fromRGB(255, 255, 255)
  
  #set {SB::robot::design::name::en::3} to "Pig"
  #set {SB::robot::design::lore::en::3} to "The Pig robot."
  set {SB::robot::design::leggings::3} to Material.LEATHER_LEGGINGS!
  set {SB::robot::design::boots::3} to Material.LEATHER_BOOTS!
  set {SB::robot::design::chestplate::3} to Material.LEATHER_CHESTPLATE!
  set {SB::robot::design::helmet::3} to getcustomhead("Pig","eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvYTU2MmEzN2I4NzFmOTY0YmZjM2UxMzExZWE2NzJhYWEwMzk4NGE1ZGM0NzIxNTRhMzRkYzI1YWYxNTdlMzgyYiJ9fX0=")
  set {SB::robot::design::color::3} to true
  set {SB::robot::design::rgb::3} to Color.fromRGB(252, 165, 255)
  
  #set {SB::robot::design::name::en::4} to "Slime"
  #set {SB::robot::design::lore::en::4} to "The Slime robot."
  set {SB::robot::design::leggings::4} to Material.LEATHER_LEGGINGS!
  set {SB::robot::design::boots::4} to Material.LEATHER_BOOTS!
  set {SB::robot::design::chestplate::4} to Material.LEATHER_CHESTPLATE!
  set {SB::robot::design::helmet::4} to getcustomhead("Pig","eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvODZjMjdiMDEzZjFiZjMzNDQ4NjllODFlNWM2MTAwMjdiYzQ1ZWM1Yjc5NTE0ZmRjOTZlMDFkZjFiN2UzYTM4NyJ9fX0=")
  set {SB::robot::design::color::4} to true
  set {SB::robot::design::rgb::4} to Color.fromRGB(0, 180, 0)
  
  #set {SB::robot::design::name::en::5} to "Cow"
  #set {SB::robot::design::lore::en::5} to "The Cow robot."
  set {SB::robot::design::leggings::5} to Material.LEATHER_LEGGINGS!
  set {SB::robot::design::boots::5} to Material.LEATHER_BOOTS!
  set {SB::robot::design::chestplate::5} to Material.LEATHER_CHESTPLATE!
  set {SB::robot::design::helmet::5} to getcustomhead("Cow","eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvZDBlNGU2ZmJmNWYzZGNmOTQ0MjJhMWYzMTk0NDhmMTUyMzY5ZDE3OWRiZmJjZGYwMGU1YmZlODQ5NWZhOTc3In19fQ==")
  set {SB::robot::design::color::5} to true
  set {SB::robot::design::rgb::5} to Color.fromRGB(100, 50, 0)
  
  #set {SB::robot::design::name::en::6} to "Chicken"
  #set {SB::robot::design::lore::en::6} to "The Chicken robot."
  set {SB::robot::design::leggings::6} to Material.LEATHER_LEGGINGS!
  set {SB::robot::design::boots::6} to Material.LEATHER_BOOTS!
  set {SB::robot::design::chestplate::6} to Material.LEATHER_CHESTPLATE!
  set {SB::robot::design::helmet::6} to getcustomhead("Chicken","eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvOTE2YjhlOTgzODljNTQxYmIzNjQ1Mzg1MGJjYmQxZjdiYzVhNTdkYTYyZGNjNTA1MDYwNDA5NzM3ZWM1YjcyYSJ9fX0=")
  set {SB::robot::design::color::6} to true
  set {SB::robot::design::rgb::6} to Color.fromRGB(255, 255, 255)
  
  #set {SB::robot::design::name::en::7} to "Creeper"
  #set {SB::robot::design::lore::en::7} to "The Creeper robot."
  set {SB::robot::design::leggings::7} to Material.LEATHER_LEGGINGS!
  set {SB::robot::design::boots::7} to Material.LEATHER_BOOTS!
  set {SB::robot::design::chestplate::7} to Material.LEATHER_CHESTPLATE!
  set {SB::robot::design::helmet::7} to getcustomhead("Creeper","eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvYmE1ZTk1NzM1YTNmMzc3MmIxYjQ4NWUxNTAyODA3YWUzOTZhNzJjNjFiZmQzNmFiNDFmYTcxYmVjMmY2NGFhMiJ9fX0=")
  set {SB::robot::design::color::7} to true
  set {SB::robot::design::rgb::7} to Color.fromRGB(0, 180, 0)
  
  #set {SB::robot::design::name::en::8} to "Villager"
  #set {SB::robot::design::lore::en::8} to "The Villager robot."
  set {SB::robot::design::leggings::8} to Material.LEATHER_LEGGINGS!
  set {SB::robot::design::boots::8} to Material.LEATHER_BOOTS!
  set {SB::robot::design::chestplate::8} to Material.LEATHER_CHESTPLATE!
  set {SB::robot::design::helmet::8} to getcustomhead("Villager","eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvYjRiZDgzMjgxM2FjMzhlNjg2NDg5MzhkN2EzMmY2YmEyOTgwMWFhZjMxNzQwNDM2N2YyMTRiNzhiNGQ0NzU0YyJ9fX0=")
  set {SB::robot::design::color::8} to true
  set {SB::robot::design::rgb::8} to Color.fromRGB(145, 83, 20)
  
  #set {SB::robot::design::name::en::9} to "Enderman"
  #set {SB::robot::design::lore::en::9} to "The Enderman robot."
  set {SB::robot::design::leggings::9} to Material.LEATHER_LEGGINGS!
  set {SB::robot::design::boots::9} to Material.LEATHER_BOOTS!
  set {SB::robot::design::chestplate::9} to Material.LEATHER_CHESTPLATE!
  set {SB::robot::design::helmet::9} to getcustomhead("Enderman","eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvMWIwOWEzNzUyNTEwZTkxNGIwYmRjOTA5NmIzOTJiYjM1OWY3YThlOGE5NTY2YTAyZTdmNjZmYWZmOGQ2Zjg5ZSJ9fX0=")
  set {SB::robot::design::color::9} to true
  set {SB::robot::design::rgb::9} to Color.fromRGB(25, 0, 51)

  #set {SB::robot::design::name::en::10} to "LavaSlime"
  #set {SB::robot::design::lore::en::10} to "The LavaSlime robot."
  set {SB::robot::design::leggings::10} to Material.LEATHER_LEGGINGS!
  set {SB::robot::design::boots::10} to Material.LEATHER_BOOTS!
  set {SB::robot::design::chestplate::10} to Material.LEATHER_CHESTPLATE!
  set {SB::robot::design::helmet::10} to getcustomhead("Lavaslime","eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvZDkwZDYxZThjZTk1MTFhMGEyYjVlYTI3NDJjYjFlZjM2MTMxMzgwZWQ0MTI5ZTFiMTYzY2U4ZmYwMDBkZThlYSJ9fX0=")
  set {SB::robot::design::color::10} to true
  set {SB::robot::design::rgb::10} to Color.fromRGB(51, 0, 0)
  
  #set {SB::robot::design::name::en::11} to "Cactus"
  #set {SB::robot::design::lore::en::11} to "The Cactus robot."
  set {SB::robot::design::leggings::11} to Material.LEATHER_LEGGINGS!
  set {SB::robot::design::boots::11} to Material.LEATHER_BOOTS!
  set {SB::robot::design::chestplate::11} to Material.LEATHER_CHESTPLATE!
  set {SB::robot::design::helmet::11} to getcustomhead("Cactus","eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvNDBkNGM4ZTkwZWRlZjhjZGUyYjg5YzdiMWM2NWJhMDJlYzMzNDFiYWQxMTVlMDBkZTIxOTkxMDVmZjE3M2Q5NCJ9fX0=")
  set {SB::robot::design::color::11} to true
  set {SB::robot::design::rgb::11} to Color.fromRGB(76, 153, 0)
  
  #set {SB::robot::design::name::en::12} to "Coconut"
  #set {SB::robot::design::lore::en::12} to "The Coconut robot."
  set {SB::robot::design::leggings::12} to Material.LEATHER_LEGGINGS!
  set {SB::robot::design::boots::12} to Material.LEATHER_BOOTS!
  set {SB::robot::design::chestplate::12} to Material.LEATHER_CHESTPLATE!
  set {SB::robot::design::helmet::12} to getcustomhead("Cactus","eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvN2IzZmQ3ZDM3NWJkZTUxODI4YzZmNmVjODg4YjJlYTg2ZjIzZmEzNDhkYjdiZGRlMDNmN2UwMDdjM2MyNDAwYiJ9fX0=")
  set {SB::robot::design::color::12} to true
  set {SB::robot::design::rgb::12} to Color.fromRGB(100, 50, 0)
  
  #set {SB::robot::design::name::en::13} to "Cake"
  #set {SB::robot::design::lore::en::13} to "The Cake robot."
  set {SB::robot::design::leggings::13} to Material.LEATHER_LEGGINGS!
  set {SB::robot::design::boots::13} to Material.LEATHER_BOOTS!
  set {SB::robot::design::chestplate::13} to Material.LEATHER_CHESTPLATE!
  set {SB::robot::design::helmet::13} to getcustomhead("Cake","eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvZWMyNDFhNTk3YzI4NWUxMDRjMjcxMTk2ZDc4NWRiNGNkMDExMGE0MGM4ZjhlNWQzNTRjNTY0NDE1OTU2N2M5ZCJ9fX0=")
  set {SB::robot::design::color::13} to true
  set {SB::robot::design::rgb::13} to Color.fromRGB(100, 50, 0)
  
  #set {SB::robot::design::name::en::14} to "Ocelot"
  #set {SB::robot::design::lore::en::14} to "The Ocelot robot."
  set {SB::robot::design::leggings::14} to Material.LEATHER_LEGGINGS!
  set {SB::robot::design::boots::14} to Material.LEATHER_BOOTS!
  set {SB::robot::design::chestplate::14} to Material.LEATHER_CHESTPLATE!
  set {SB::robot::design::helmet::14} to getcustomhead("Ocelot","eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvMTE4YjZiNzk3ODMzNjhkZmUwMDQyOTg1MTEwZGEzNjZmOWM3ODhiNDUwOTdhM2VhNmQwZDlhNzUzZTlmNDJjNiJ9fX0=")
  set {SB::robot::design::color::14} to true
  set {SB::robot::design::rgb::14} to Color.fromRGB(255, 128, 0)
  
  #set {SB::robot::design::name::en::15} to "Zombie"
  #set {SB::robot::design::lore::en::15} to "The Zombie robot."
  set {SB::robot::design::leggings::15} to Material.LEATHER_LEGGINGS!
  set {SB::robot::design::boots::15} to Material.LEATHER_BOOTS!
  set {SB::robot::design::chestplate::15} to Material.LEATHER_CHESTPLATE!
  set {SB::robot::design::helmet::15} to getcustomhead("Zombie","eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvZDk3ZTQyNTkzNzlhMDZmMjQ4NDNjMWJiNDJmMmRmMzVjMTNmODAxYWQwNzlmNzE1YmRlZDQ4OGRiOGY1N2MzIn19fQ==")
  set {SB::robot::design::color::15} to true
  set {SB::robot::design::rgb::15} to Color.fromRGB(76, 153, 0)
  
  #set {SB::robot::design::name::en::16} to "Steve"
  #set {SB::robot::design::lore::en::16} to "The Steve robot."
  set {SB::robot::design::leggings::16} to Material.LEATHER_LEGGINGS!
  set {SB::robot::design::boots::16} to Material.LEATHER_BOOTS!
  set {SB::robot::design::chestplate::16} to Material.LEATHER_CHESTPLATE!
  set {SB::robot::design::helmet::16} to 1 of player head item
  set {SB::robot::design::color::16} to true
  set {SB::robot::design::rgb::16} to Color.fromRGB(145, 83, 20)
  
  #set {SB::robot::design::name::en::17} to "Wither"
  #set {SB::robot::design::lore::en::17} to "The Wither robot."
  set {SB::robot::design::leggings::17} to Material.LEATHER_LEGGINGS!
  set {SB::robot::design::boots::17} to Material.LEATHER_BOOTS!
  set {SB::robot::design::chestplate::17} to Material.LEATHER_CHESTPLATE!
  set {SB::robot::design::helmet::17} to getcustomhead("Wither","eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvZWExNWQwNWQwYTg2ODk2OGM2NjhiNWQ4NmM0MDgzMDUzZWJlOWZkZWE5Y2U0YWExMzE1MDM1ZDNiYTg4NDNkIn19fQ==")
  set {SB::robot::design::color::17} to true
  set {SB::robot::design::rgb::17} to Color.fromRGB(0, 0, 0)
  
  #set {SB::robot::design::name::en::18} to "Wither skeleton"
  #set {SB::robot::design::lore::en::18} to "The Wither skeleton robot."
  set {SB::robot::design::leggings::18} to Material.LEATHER_LEGGINGS!
  set {SB::robot::design::boots::18} to Material.LEATHER_BOOTS!
  set {SB::robot::design::chestplate::18} to Material.LEATHER_CHESTPLATE!
  set {SB::robot::design::helmet::18} to getcustomhead("Wither skeleton","eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvYmE5NmU5ZDc2YmVkMzAwOTBjZTZlMmQ4NDI1OTk2NTk0ZWVjNmQ2OGFjODhjZjA3MzU2ZTk4MTQ4MzQyNDNlYyJ9fX0=")
  set {SB::robot::design::color::18} to true
  set {SB::robot::design::rgb::18} to Color.fromRGB(0, 0, 0)
  
  #set {SB::robot::design::name::en::19} to "Melon"
  #set {SB::robot::design::lore::en::19} to "The Melon robot."
  set {SB::robot::design::leggings::19} to Material.LEATHER_LEGGINGS!
  set {SB::robot::design::boots::19} to Material.LEATHER_BOOTS!
  set {SB::robot::design::chestplate::19} to Material.LEATHER_CHESTPLATE!
  set {SB::robot::design::helmet::19} to getcustomhead("Melon","eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvODA5MmQ3NjBjNDUzNjI1NTk0NjYyYzlmYzg2ODE1MmEwMWExZjZmOGQ2MTM3ZmI4NjhkYTVhOTViYmQxZjU4In19fQ==")
  set {SB::robot::design::color::19} to true
  set {SB::robot::design::rgb::19} to Color.fromRGB(76, 153, 0)
  
  #set {SB::robot::design::name::en::20} to "Pumpkin"
  #set {SB::robot::design::lore::en::20} to "The Pumpkin robot."
  set {SB::robot::design::leggings::20} to Material.LEATHER_LEGGINGS!
  set {SB::robot::design::boots::20} to Material.LEATHER_BOOTS!
  set {SB::robot::design::chestplate::20} to Material.LEATHER_CHESTPLATE!
  set {SB::robot::design::helmet::20} to getcustomhead("Pumpkin","eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvYjE2MmQ3MmQ4ZDU3NmQ5YmJiODFjOWFlZGM2OTA2MTc0MTZkZWRjOTVjY2YxN2Y3OTQ1ODBjYTY3NDk0MmE2NSJ9fX0=")
  set {SB::robot::design::color::20} to true
  set {SB::robot::design::rgb::20} to Color.fromRGB(255, 128, 0)

  #set {SB::robot::design::name::en::21} to "Blaze"
  #set {SB::robot::design::lore::en::21} to "The Blaze robot."
  set {SB::robot::design::leggings::21} to Material.LEATHER_LEGGINGS!
  set {SB::robot::design::boots::21} to Material.LEATHER_BOOTS!
  set {SB::robot::design::chestplate::21} to Material.LEATHER_CHESTPLATE!
  set {SB::robot::design::helmet::21} to getcustomhead("Blaze","eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvZDA2ZTM0MmY5MGVjNTM4YWFhMTU1MmIyMjRmMjY0YTA0MDg0MDkwMmUxMjZkOTFlY2U2MTM5YWE1YjNjN2NjMyJ9fX0=")
  set {SB::robot::design::color::21} to true
  set {SB::robot::design::rgb::21} to Color.fromRGB(255, 128, 0)
  # make them lava resistent

  
function getnbtvalue(item:item,tag:text) :: object:
  set {_item} to 1 of {_item}
  set {_CraftItemStack} to CraftItemStack.asNMSCopy({_item})
  set {_NBTTagCompound} to {_CraftItemStack}.getTag()
  if {_NBTTagCompound}.hasKey("%{_tag}%") is not set:
    return false
  else:
    set {_value} to {_NBTTagCompound}.getString("%{_tag}%")
    return {_value}

function setnbtvalue(item:item,tag:text,value:text) :: item:
  set {_item} to 1 of {_item}
  set {_CraftItemStack} to CraftItemStack.asNMSCopy({_item})
  set {_NBTTagCompound} to {_CraftItemStack}.getTag()
  if {_NBTTagCompound} is not set:
    set {_NBTTagCompound} to new NBTTagCompound()
  {_NBTTagCompound}.set("%{_tag}%", new NBTTagString("%{_value}%"))
  set {_nbt} to MojangsonParser.parse("%{_NBTTagCompound}%")
  {_CraftItemStack}.setTag({_nbt})
  set {_item1} to CraftItemStack.asBukkitCopy({_CraftItemStack})
  return {_item1}
    
command /giverobo:
  permission: is.admin
  trigger:
    set {_item} to {@robotitem}
    set {_item} to {_item} named "{@robotname}"
    set line 1 of lore of {_item} to "{@robotitemlore}"
    set {_item} to setnbtvalue({_item},"blocks","0")
    set {_item} to setnbtvalue({_item},"level","0")
    set {_item} to setnbtvalue({_item},"robotdesign","1")
    set {_item} to setnbtvalue({_item},"currentjob","1")
    set {_item} to setnbtvalue({_item},"robot","robotsk")
    set {_item} to setnbtvalue({_item},"robotname","{@robotname}")

    give 1 of {_item} to player

on place of {@robotitem}:
  set {_value} to getnbtvalue(player's tool,"robot")
  if {_value} is "robotsk":
    set {_item} to player's tool
    set {_lang} to {SK::lang::%uuid of player%}
    cancel event
    remove 1 of {_item} from player's inventory
    set {_blocks} to getnbtvalue({_item},"blocks")
    set {_level} to getnbtvalue({_item},"level")
    set {_design} to getnbtvalue({_item},"robotdesign")
    set {_job} to getnbtvalue({_item},"currentjob")
    set {_name} to getnbtvalue({_item},"robotname")
    set {_loc} to event-location
    wait 1 tick
    set block at {_loc} to barrier
    add 20 to y-coord of {_loc}
    if player's yaw is between 315 and 360:
      set yaw of {_loc} to 0
    else if player's yaw is between 0 and 45:
      set yaw of {_loc} to 0
    else if player's yaw is between 45 and 135:
      set yaw of {_loc} to 90
    else if player's yaw is between 135 and 225:
      set yaw of {_loc} to 180
    else if player's yaw is between 225 and 315:
      set yaw of {_loc} to 270
    set {_world} to player's world
  
    spawn 1 armor stand at {_loc}
    set {_robo} to last spawned entity
    set metadata "robo" of {_robo} to 1
    add {_robo} to {TMP::activerobo::*}

    {_robo}.setGravity(false)
    {_robo}.setBasePlate(false)
    {_robo}.setCanPickupItems(false)
    {_robo}.setCustomName("%{_name}%")
    {_robo}.setCustomNameVisible(true)
    {_robo}.setVisible(true)
    {_robo}.setSmall(true)
    {_robo}.setArms(true)


    
    set {_leggings} to new ItemStack({SB::robot::design::leggings::%{_design}%})
    set {_boots} to new ItemStack({SB::robot::design::boots::%{_design}%})
    set {_chestplate} to new ItemStack({SB::robot::design::chestplate::%{_design}%})
    set {_head} to {SB::robot::design::helmet::%{_design}%}
    set {_color} to {SB::robot::design::color::%{_design}%}
    set {_rgb} to {SB::robot::design::rgb::%{_design}%}
  

    set {_head} to setnbtvalue({_head},"blocks","%{_blocks}%")
    set {_head} to setnbtvalue({_head},"level","%{_level}%")
    set {_head} to setnbtvalue({_head},"robotdesign","%{_design}%")
    set {_head} to setnbtvalue({_head},"currentjob","%{_job}%")
    set {_head} to setnbtvalue({_head},"robotname","%{_name}%")
    set {_head} to setnbtvalue({_head},"owner",uuid of player)
    
    set {_head} to setnbtvalue({_head},"robot","robotsk")


    if {_color} is true:
      set {_meta} to {_boots}.getItemMeta()
      {_meta}.setColor({_rgb})
      {_boots}.setItemMeta({_meta})
      {_leggings}.setItemMeta({_meta})
      {_chestplate}.setItemMeta({_meta})


    set {_jobtool} to {SB::robot::job::tool::%{_job}%}
    set {_jobtool} to glowing {_jobtool}
    {_robo}.setLeggings({_leggings})
    {_robo}.setHelmet({_head})
    {_robo}.setBoots({_boots})
    {_robo}.setChestplate({_chestplate})
    {_robo}.setItemInHand({_jobtool})
    set {_move} to 1
    set {_soundloc} to location of player
    add 10 to y-coord of {_soundloc}
    playsound(player,{_soundloc},"{@summonsound}","master",1,1)

    loop 41 times:
      wait 1 tick
      remove 0.5 from y-coord of {_loc}
      teleport {_robo} to {_loc}
      set {_x} to x-coord of {_loc}
      set {_y} to y-coord of {_loc}
      set {_z} to z-coord of {_loc}
      {_world}.spawnParticle(Particle.{@summonparticles}!,{_x},{_y},{_z}, 0.5)
    playsound(player,{_soundloc},"{@arrivesound}","master",1,0.5)
    loop 100 times:
      {_world}.spawnParticle(Particle.{@arriveparticles}!,{_x},{_y},{_z}, 0.9)
    set block at {_loc} to air
    if {@instantstart} is true:
      set {_roboton} to {SB::robot::on::%{_lang}%}
      if {_roboton} is not set:
        set {_roboton} to "{@roboton}"
      else:
        set {_roboton} to {_roboton}
      {_robo}.setCustomName("%{_name}% %{_roboton}%")
      roboanimation({_robo},1)
    else:
      set {_robotoff} to {SB::robot::robotoff::%{_lang}%}
      if {_robotoff} is not set:
        set {_robooff} to "{@robotoff}"
      else:
        set {_robooff} to {_robotoff}
      {_robo}.setCustomName("%{_name}% %{_robotoff}%")
function openrobotskmenuback(player:player):
  set {_robot} to {TMP::currentrobot::%{_player}%}
  openrobotskmenu({_robot},{_player})

function openrobotskmenu(robot:entity,player:player):
  #
  # > Set frequently used data into local variables.
  set {_uuid} to uuid of {_player}
  set {_lang} to {SK::lang::%{_uuid}%}
  
  if {SB::robot::robotguiname::%{_lang}%} is not set:
    opengui({_player},36,"{@robotguiname}")
  else:
    opengui({_player},36,"%{SB::robot::robotguiname::%{_lang}%}%")
  #
  # > Fill the Inventory with empty glass panes.
  loop 36 times:
    set slot loop-number - 1 of {_player}'s current inventory to black stained glass pane named " "
  set metadata "currentrobot" of {_player} to {_robot}
  set {TMP::currentrobot::%{_player}%} to {_robot}
  if {SB::robot::robotstatuson::%{_lang}%} is not set:
    set {_robotstatuson} to "{@robotstatuson}"
    set {_robotstatusoff} to "{@robotstatusoff}"
    set {_clicktotogglesstatus} to "{@clicktotogglesstatus}"
  else:
    set {_robotstatuson} to {SB::robot::robotstatuson::%{_lang}%}
    set {_robotstatusoff} to {SB::robot::robotstatusoff::%{_lang}%}
    set {_clicktotogglesstatus} to {SB::robot::clicktotogglesstatus::%{_lang}%}
  if metadata value "robo" of {_robot} is 1:
    setguiitem({_player},13,emerald block,1,"%{_robotstatuson}%","%{_clicktotogglesstatus}%","changerobotstate(false,""%{_player}%"" parsed as player)",true)
  else:
    setguiitem({_player},13,redstone block,1,"%{_robotstatusoff}%","%{_clicktotogglesstatus}%","changerobotstate(true,""%{_player}%"" parsed as player)",true)
  
  set {_job} to getnbtvalue(helmet of {_robot},"currentjob")
  set {_design} to getnbtvalue(helmet of {_robot},"robotdesign")
  if {SB::robot::currentjob::%{_lang}%} is not set:
    set {_currentjoblang} to "{@currentjob}"
    set {_currentdesignlang} to "{@currentdesign}"
    set {_renamelangtitle} to "{@renametitle}"
    set {_renamelanglore} to "{@renamelore}"
  else:
    set {_currentjoblang} to {SB::robot::currentjob::%{_lang}%}
    set {_currentdesignlang} to {SB::robot::currentdesign::%{_lang}%}
    set {_renamelangtitle} to {SB::robot::renametitle::%{_lang}%}
    set {_renamelanglore} to {SB::robot::renamelore::%{_lang}%}
  set {_jobname} to {SB::robot::job::name::%{_lang}%::%{_job}%}
  set {_joblore} to {SB::robot::job::lore::%{_lang}%::%{_job}%}
  set {_designname} to {SB::robot::design::name::%{_lang}%::%{_design}%}
  set {_jobtool} to {SB::robot::job::tool::%{_job}%}
  set {_s1} to {SB::config::color::secondary::1}
  setguiitem({_player},11,{_jobtool},1,"%{_currentjoblang}%","%{_s1}%%{_jobname}%","openrobotskjobmenu(""%{_player}%"" parsed as player)",true)

  setguiitem({_player},21,helmet of {_robot},1,"%{_currentdesignlang}%","%{_s1}%%{_designname}%","openrobotskdesignmenu(""%{_player}%"" parsed as player)",false)
  setguiitem({_player},23,nametag,1,"%{_renamelangtitle}%","%{_renamelanglore}%"," ",true)


  
  set {_cinv} to current inventory of {_player}
  while {_cinv} is current inventory of {_player}:
    set {_blocks} to getnbtvalue(helmet of {_robot},"blocks")
    if {SB::robot::currentdesign::%{_lang}%} is not set:
      set {_blocksbroken} to "{@blocksbroken}"
      set {_stats} to "{@stats}"
    else:
      set {_blocksbroken} to {SB::robot::blocksbroken::%{_lang}%}
      set {_stats} to {SB::robot::stats::%{_lang}%}
    replace all "<blocks>" with "%{_blocks}%" in {_blocksbroken}
    setguiitem({_player},15,book,1,"%{_stats}%","%{_blocksbroken}%"," ",true)
    wait 5 ticks

function openrobotskdesignmenu(player:player):
  #
  # > Set frequently used data into local variables.
  set {_uuid} to uuid of {_player}
  set {_lang} to {SK::lang::%{_uuid}%}
  set {_robot} to {TMP::currentrobot::%{_player}%}
  if {SB::robot::robotdesignguiname::%{_lang}%} is not set:
    opengui({_player},45,"{@robotdesignguiname}")
  else:
    opengui({_player},45,"%{SB::robot::robotdesignguiname::%{_lang}%}%")
  #
  # > Fill the Inventory with empty glass panes.
  loop 45 times:
    set slot loop-number - 1 of {_player}'s current inventory to black stained glass pane named " "
  
  set {_amount} to size of {SB::robot::design::helmet::*}
  set {_start} to 10
  set {_design} to 0
  set {_slotskip} to 0
  loop {SB::robot::design::helmet::*}:
    add 1 to {_design}
    add 1 to {_slotskip}
    if {_slotskip} is 8:
      add 2 to {_start}
      set {_slotskip} to 1
    setguiitem({_player},{_start},loop-value,1,"&r%{SB::robot::design::name::%{_lang}%::%loop-index%}%","%{SB::robot::design::lore::%{_lang}%::%loop-index%}%","changerobotskdesign(""%{_player}%"" parsed as player,%{_design}%)",false)
    add 1 to {_start}
  #
  # > This item allows the user to go into the previous menu.
  setguiitem({_player},44,{SB::config::backguiitem},1,"&r%{SB::lang::guibacktopreviousmenu::%{SK::lang::%{_uuid}%}%}%","%{SB::lang::guibacktopreviousmenulore::%{SK::lang::%{_uuid}%}%}%","openrobotskmenuback(""%{_player}%"" parsed as player)",false)

function openrobotskjobmenu(player:player):
  #
  # > Set frequently used data into local variables.
  set {_uuid} to uuid of {_player}
  set {_lang} to {SK::lang::%{_uuid}%}
  set {_robot} to {TMP::currentrobot::%{_player}%}
  if {SB::robot::robotjobguiname::%{_lang}%} is not set:
    opengui({_player},27,"{@robotjobguiname}")
  else:
    opengui({_player},27,"%{SB::robot::robotjobguiname::%{_lang}%}%")
  #
  # > Fill the Inventory with empty glass panes.
  loop 27 times:
    set slot loop-number - 1 of {_player}'s current inventory to black stained glass pane named " "
  
  set {_amount} to size of {SB::robot::job::tool::*}
  set {_start} to 10
  set {_design} to 0
  set {_slotskip} to 0
  loop {SB::robot::job::tool::*}:
    add 1 to {_job}
    add 1 to {_slotskip}
    if {_slotskip} is 8:
      add 2 to {_start}
      set {_slotskip} to 1
    setguiitem({_player},{_start},loop-value,1,"&r%{SB::robot::job::name::%{_lang}%::%loop-index%}%","%{SB::robot::job::lore::%{_lang}%::%loop-index%}%","changerobotskjob(""%{_player}%"" parsed as player,%{_job}%)",false)
    add 1 to {_start}
  #
  # > This item allows the user to go into the previous menu.
  setguiitem({_player},26,{SB::config::backguiitem},1,"&r%{SB::lang::guibacktopreviousmenu::%{SK::lang::%{_uuid}%}%}%","%{SB::lang::guibacktopreviousmenulore::%{SK::lang::%{_uuid}%}%}%","openrobotskmenuback(""%{_player}%"" parsed as player)",false)

    
function changerobotskjob(player:player,job:number):
  set {_robot} to {TMP::currentrobot::%{_player}%}
  close {_player}'s inventory
  set {_head} to helmet of {_robot}
  set helmet of {_robot} to setnbtvalue({_head},"currentjob","%{_job}%")

  
  set {_jobtool} to {SB::robot::job::tool::%{_job}%}
  set {_jobtool} to glowing {_jobtool}

  {_robot}.setItemInHand({_jobtool})
  
  changerobotstate(false,{_player})
  

function changerobotskdesign(player:player,design:number):
  set {_robot} to {TMP::currentrobot::%{_player}%}
  close {_player}'s inventory
  set {_item} to helmet of {_robot}
  
  set {_blocks} to getnbtvalue({_item},"blocks")
  set {_level} to getnbtvalue({_item},"level")
  set {_job} to getnbtvalue({_item},"currentjob")
  set {_name} to getnbtvalue({_item},"robotname")
  set {_owner} to getnbtvalue({_item},"owner")
    
  set {_leggings} to new ItemStack({SB::robot::design::leggings::%{_design}%})
  set {_boots} to new ItemStack({SB::robot::design::boots::%{_design}%})
  set {_chestplate} to new ItemStack({SB::robot::design::chestplate::%{_design}%})
  set {_head} to {SB::robot::design::helmet::%{_design}%}
  set {_color} to {SB::robot::design::color::%{_design}%}
  set {_rgb} to {SB::robot::design::rgb::%{_design}%}

  set {_head} to setnbtvalue({_head},"blocks","%{_blocks}%")
  set {_head} to setnbtvalue({_head},"level","%{_level}%")
  set {_head} to setnbtvalue({_head},"robotdesign","%{_design}%")
  set {_head} to setnbtvalue({_head},"currentjob","%{_job}%")
  set {_head} to setnbtvalue({_head},"robotname","%{_name}%")
  set {_head} to setnbtvalue({_head},"owner","%{_owner}%")
  set {_head} to setnbtvalue({_head},"robot","robotsk")


  if {_color} is true:
    set {_meta} to {_boots}.getItemMeta()
    {_meta}.setColor({_rgb})
    {_boots}.setItemMeta({_meta})
    {_leggings}.setItemMeta({_meta})
    {_chestplate}.setItemMeta({_meta})

  {_robot}.setLeggings({_leggings})
  {_robot}.setHelmet({_head})
  {_robot}.setBoots({_boots})
  {_robot}.setChestplate({_chestplate})


command /robotname [<text>]:
  trigger:
    if player's target is armor stand:
      set {_value} to getnbtvalue(helmet of player's target,"robot")
      if {_value} is "robotsk":
        set {_owneruuid} to getnbtvalue(helmet of player's target,"owner")
        #
        # > Set frequently used data into local variables.
        set {_uuid} to uuid of player
        set {_lang} to {SK::lang::%{_uuid}%}
        if player's uuid is {_owneruuid}:
          set {_robot} to player's target
          set {_name} to coloured arg-1
          if metadata value "robo" of {_robot} is 1:
            if {SB::robot::on::%{SK::lang::%{_uuid}%}%} is not set:
              set {_roboon} to "{@roboton}"
            else:
              set {_roboon} to {SB::robot::on::%{_lang}%}
            {_robot}.setCustomName("%{_name}% %{_roboon}%")
          else:
            if {SB::robot::robotoff::%{_lang}%} is not set:
              set {_robooff} to "{@robotoff}"
            else:
              set {_robooff} to "%{SB::robot::robotoff::%{_lang}%}%"
            {_robot}.setCustomName("%{_name}% %{_robooff}%")
          set helmet of player's target to setnbtvalue(helmet of player's target,"robotname","%{_name}%")
          if {SB::robot::renamedrobot::%{SK::lang::%{_uuid}%}%} is not set:
            message "{@prefix} {@renamedrobot}"
          else:
            message "%{SB::robot::prefix::%{_lang}%}% %{SB::robot::renamedrobot::%{_lang}%}%"
        else:
          if {SB::robot::onlyrobotownererror::%{SK::lang::%{_uuid}%}%} is not set:
            message "{@prefix} {@onlyrobotownererror}"
          else:
            message "%{SB::robot::prefix::%{_lang}%}% %{SB::robot::onlyrobotownererror::%{_lang}%}%"

    
function changerobotstate(state:boolean,player:player):
  set {_robot} to {TMP::currentrobot::%{_player}%}
  set {_uuid} to uuid of {_player}
  set {_lang} to {SK::lang::%{_uuid}%}
  set {_name} to getnbtvalue(helm of {_robot},"robotname")
  if {_state} is true:
    if {SB::robot::on::%{SK::lang::%{_uuid}%}%} is not set:
      set {_roboon} to "{@roboton}"
    else:
      set {_roboon} to {SB::robot::on::%{_lang}%}
    {_robot}.setCustomName("%{_name}% %{_roboon}%")
    add {_robot} to {TMP::activerobo::*}
    set metadata "robo" of {_robot} to 1
    roboanimation({_robot},1)
  else:
    if {SB::robot::robotoff::%{SK::lang::%{_uuid}%}%} is not set:
      set {_robooff} to "{@robotoff}"
    else:
      set {_robooff} to {SB::robot::robotoff::%{_lang}%}
    {_robot}.setCustomName("%{_name}% %{_robooff}%")
    loop {TMP::activerobo::*}:
      if loop-value is {_robot}:
        delete {TMP::activerobo::%loop-index%}
    set metadata "robo" of {_robot} to 2
    roboanimation({_robot},1)
  
on inventory close:
  delete {TMP::currentrobot::%{_player}%}
    
function roboanimation(robo:entity,move:number):
  set {_angle} to new EulerAngle(-0.80, 0, 0)
  set {_start} to true
  set {_breaks} to {@breaksperfuel}
  if chunk at {_robo} is not loaded:
    stop
  set {_job} to getnbtvalue(helmet of {_robo},"currentjob")
  set {_ticks} to {SB::robot::job::ticks::%{_job}%}
  set {_timespan} to "%{_ticks}% ticks" parsed as timespan
  set {_movementspeed} to {SB::robot::job::movespeed::%{_job}%}
  set {_movementspeed} to {_movementspeed} * {SB::robot::job::ticks::%{_job}%}
  #
  # > Movements for the miner (ID 1)
  while {_robo}.isValid():
    wait {_timespan}
    set {_x} to {_angle}.getX()
    if {_x} <= -2.70:
      set {_move} to 2
      delete {_start}
    if {_x} >= -0.80:
      set {_move} to 1
      set {_loc} to location of block in front of {_robo}
      set {_block} to block at {_loc}
      if {_start} is not set:
        if {_block} is not {@disallowedblocks}:
          set {_item} to helmet of {_robo}
          set {_value} to getnbtvalue({_item},"blocks")
          set {_value} to {_value} parsed as number
          if {_value} is "":
            set {_value} to 0
          add 1 to {_value}
          set {_item} to setnbtvalue({_item},"blocks","%{_value}%")
          set helmet of {_robo} to {_item}
          if {@fuel} is true:
            set {_chest} to block below {_robo}
            set {_amount} to amount of {@fuelitem} in {_chest}'s inventory
            if {_amount} is 0:
              set {_uuid} to getnbtvalue({_item},"owner")
              if {SB::robot::robotoff::%{SK::lang::%{_uuid}%}%} is not set:
                set {_robooff} to "{@robotoff}"
              else:
                set {_robooff} to {SB::robot::robotoff::%{_lang}%}
              {_robo}.setCustomName("{@robotname} %{_robooff}%")
              set metadata "robo" of {_robo} to 2
              stop
            add 1 to {_breaks}
            {_block}.breakNaturally()

            if {_breaks} >= {@breaksperfuel}:
              set {_breaks} to 0
              remove 1 of {@fuelitem} from {_chest}'s inventory
          else:
            {_block}.breakNaturally()
      if metadata value "robo" of {_robo} is 2:
        stop
    set {_movement3} to {_ticks} * 0.03
    if {_move} is 1:
      set {_angle} to {_angle}.subtract({_movementspeed},0,{_movement3})
    if {_move} is 2:
      set {_angle} to {_angle}.add({_movementspeed},0,{_movement3})
    {_robo}.setRightArmPose({_angle})

on death of armor stand:
  loop drops:
    set {_value} to getnbtvalue(loop-item,"robot")
    if {_value} is "robotsk":
      set {_item} to loop-item
      stop loop
  if {_value} is "robotsk":
    clear drops
    loop {TMP::activerobo::*}:
      if loop-value is victim:
        delete {TMP::activerobo::%loop-index%}
        stop loop
    set {_loc} to location of victim
    set {_blocks} to getnbtvalue({_item},"blocks")
    set {_job} to getnbtvalue({_item},"currentjob")
    set {_design} to getnbtvalue({_item},"robotdesign")
    set {_name} to getnbtvalue({_item},"robotname")

    set {_item} to {@robotitem}
    set {_item} to {_item} named "{@robotname}"
    set line 1 of lore of {_item} to "{@robotitemlore}"
    set {_item} to setnbtvalue({_item},"robotdesign","%{_design}%")
    set {_item} to setnbtvalue({_item},"blocks","%{_blocks}%")
    set {_item} to setnbtvalue({_item},"currentjob","%{_job}%")
    set {_item} to setnbtvalue({_item},"robotname","%{_name}%")

    set {_item} to setnbtvalue({_item},"robot","robotsk")

    drop {_item} at {_loc}
    
on chunk unload:
  loop {TMP::activerobo::*}:
    if loop-value's chunk is event-chunk:
      set {_name} to getnbtvalue(helm of loop-value,"robotname")
      set {_uuid} to getnbtvalue(helm of loop-value,"owner")
      set {_lang} to {SK::lang::%{_uuid}%}
      set {_robotoff} to {SB::robot::robotoff::%{_lang}%}
      if {_robotoff} is not set:
        set {_robooff} to "{@robotoff}"
      else:
        set {_robooff} to {_robotoff}
      loop-value.setCustomName("%{_name}% %{_robooff}%")
      set metadata "robo" of loop-value to 2

      delete {TMP::activerobo::%loop-index%}

on unload:
  delete {TMP::currentrobot::*}
  loop {TMP::activerobo::*}:
    set {_name} to getnbtvalue(helm of loop-value,"robotname")
    set {_uuid} to getnbtvalue(helm of loop-value,"owner")
    set {_lang} to {SK::lang::%{_uuid}%}
    set {_robotoff} to {SB::robot::robotoff::%{_lang}%}
    if {_robotoff} is not set:
      set {_robooff} to "{@robotoff}"
    else:
      set {_robooff} to {_robotoff}
    loop-value.setCustomName("%{_name}% %{_robooff}%")
    set metadata "robo" of loop-value to 2
    delete {TMP::activerobo::%loop-index%}

on PlayerInteractEntityEvent:
  set {_value} to getnbtvalue(helmet of event.getRightClicked(),"robot")
  if {_value} is "robotsk":
    cancel event
on PlayerArmorStandManipulateEvent:
  set {_value} to getnbtvalue(helmet of event.getRightClicked(),"robot")
  if {_value} is "robotsk":
    cancel event
    openrobotskmenu(event.getRightClicked(),event.getPlayer())
    stop

