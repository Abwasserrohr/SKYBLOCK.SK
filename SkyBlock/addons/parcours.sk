#
# ==============
# parcours.sk v0.0.1
# ==============
# Let players create jump and run parcours. There are start, checkpoint and finish blocks which can
# be placed everywhere it is allowed. Players can also try to get into the toplist by speedrunning
# some parcours if they want to do that.
# ==============
# Dependencies
# ==============
# > Spigot - https://hub.spigotmc.org/jenkins/job/BuildTools/
# > Skript by bensku - https://github.com/SkriptLang/Skript/releases
# > skript-mirror - https://github.com/btk5h/skript-mirror/releases
# > SKQuery - https://www.spigotmc.org/resources/unofficial-skquery-fork-1-6-1-12.36631/

# ==============
# How to use it:
# ==============
# > First use: Place parcours.sk into your "plugins/Skript/scripts/" folder and restart. Subfolders are possible too.
# > Commands: /giveparcour <player>
# > Usage for players: Place the blocks and use the inventory of these blocks to get
# > checkpoint and finish blocks. They can be removed using their inventory menu.
# > To disable, simply put a "-" in front of this file name.

#
# > If you want to change the look or settings, here are the options.
# > You can also change the skript itself to work as you want.
options:
	parcouritem: sticky piston
	pressureplate: stone pressure plate
	parcourblock: upward dropper
	parcourblock1: dropper
	menuitemcheckpoint: heavy weighted pressure plate
	menuitemfinish: light weighted pressure plate
	menuitembreak: barrier


import:
	java.util.UUID
	
on dispense of bedrock:
	if name of event-item is "parcour":
		cancel event
		set {_item} to event-item
		set {_type} to getnbtvalue({_item},"type")
		set {_parcourid} to getnbtvalue({_item},"id")
		set {_loc} to event-location
		add 1 to y-coord of {_loc}
		if {_type} is "checkpoint":
			loop players in radius 1.5 of {_loc}:
				if metadata value "parcour" of loop-player is "ingame":
					if metadata value "parcourid" of loop-player is {_parcourid}:
						set {_blocklocation} to location of event-block
						add 0.5 to y-coord of {_blocklocation}
						healandfeed(loop-player)
						if metadata value "checkpoint" of loop-player is not {_blocklocation}:
							send subtitle "Checkpoint erreicht" to loop-player for 0.5 seconds with fadein 5 tick and fade out 5 tick
						set metadata "checkpoint" of loop-player to {_blocklocation}

					else:
						actionbar(loop-player,"&4Invalid checkpoint")
			stop
		else if {_type} is "start":

			set {_creatoruuid} to getnbtvalue({_item},"creator")
			set {_mode} to getnbtvalue({_item},"mode")
			set {_creator} to {_creatoruuid} parsed as player
			loop players in radius 1 of {_loc}:
				set {_blocklocation} to location of event-block
				add 0.5 to y-coord of {_blocklocation}
				set metadata "parcourid" of loop-player to {_parcourid}
				set metadata "runid" of loop-player to UUID.randomUUID()
				startparcourtimer(loop-player,{_parcourid})
				if metadata value "checkpoint" of loop-player is not {_blocklocation}:
					message "Willkommen beim Parkour von %{_creator}%." to loop-player
					message "Aktueller Modus: %{_mode}%" to loop-player
					set metadata "checkpoint" of loop-player to {_blocklocation}
					set metadata "startpoint" of loop-player to {_blocklocation}
					if metadata value "parcour" of loop-player is not "ingame":
						saveinventory(loop-player)
						clear loop-player's inventory
						set {_item} to 1 of floor sign named "&rCheckpoint"
						set {_item1} to 1 of eye of ender named "&rNeustart"
						set {_item2} to 1 of barrier named "&rBeenden"
						set slot 0 of loop-player's inventory to {_item}
						set slot 4 of loop-player's inventory to {_item1}
						set slot 8 of loop-player's inventory to {_item2}
					set metadata "parcour" of loop-player to "ingame"
					set gamemode of loop-player to adventure
					healandfeed(loop-player)
			stop
		if {_type} is "finish":
			loop players in radius 1 of {_loc}:
				if metadata value "parcour" of loop-player is "ingame":
					if metadata value "parcourid" of loop-player is {_parcourid}:
						set {_blocklocation} to location of event-block
						add 0.5 to y-coord of {_blocklocation}
						set {_player} to loop-player
						if metadata value "checkpoint" of loop-player is not "finish":
							message "Ziel erreicht." to loop-player
							set {_start} to metadata value "%{_parcourid}%-start" of loop-player
							set {_diff} to difference between now and {_start}
							message "Deine Zeit: %{_diff}%" to loop-player
							set metadata "checkpoint" of loop-player to "finish"
							delete metadata "%{_parcourid}%-start" of {_player}
							exitparcour(loop-player)
					else:
						actionbar(loop-player,"&4Invalid finish")
			stop
			
on damage of player:
	if metadata value "parcour" of victim is "ingame":
		cancel event
		if "%damage cause%" is "void":
			parcourcheckpoint(victim)
			
			
function startparcourtimer(player:player,parcourid:text):
	set {_runid} to metadata value "runid" of {_player}
	set {_start} to now
	set metadata "%{_parcourid}%-start" of {_player} to {_start}
	while metadata value "runid" of {_player} is {_runid}:
		set {_difference} to "%difference between now and {_start}%"
		replace all " seconds" with "" in {_difference}
		replace all " second" with "" in {_difference}
		replace all "." with ":" in {_difference}
		replace all " minutes and " with ":" in {_difference}
		replace all " minute and " with ":" in {_difference}
		if difference between now and {_start} > 1 hour:
			stop
		if difference between now and {_start} <= 1 minutes:
			set {_difference} to "00:%{_difference}%"
		set {_time::*} to {_difference} split at ":"
		loop {_time::*}:
			if length of loop-value is 1:
				set {_time::%loop-index%} to "0%loop-value%"
		if {_time::3} is not set:
			set {_time::3} to "00"
		if {_time::2} is not set:
			set {_time::2} to "00"
		if {_time::1} is not set:
			set {_time::1} to "00"
		actionbar({_player},"%{_time::1}%:%{_time::2}%:%{_time::3}%")
		if {_player} is offline:
			stop
		wait 2 ticks

			
on inventory click:
	#
	# > If the player isn't in a gui.sk inventory, prevent it.
	if player's gamemode is adventure:
		if {SK::GUI::inv::%player%} is not set:
			if metadata value "parcour" of player is "ingame":
				cancel event
		

on rightclick holding sign:
	if player's gamemode is adventure:
		if metadata value "parcour" of player is "ingame":
			cancel event
			parcourcheckpoint(player)
			
on rightclick holding eye of ender:
	if player's gamemode is adventure:
		if metadata value "parcour" of player is "ingame":
			cancel event
			apply potion of resistance of tier 5 to player for 1 second
			set {_checkpoint} to metadata value "startpoint" of player
			teleport player to {_checkpoint}

on rightclick holding barrier:
	if player's gamemode is adventure:
		cancel event
		exitparcour(player)

on drop:
	if player's gamemode is adventure:
		if metadata value "parcour" of player is "ingame":
			cancel event
			message "du kannst nichts wegwerfen."
			
on quit:
	if player's gamemode is adventure:
		if metadata value "parcour" of player is "ingame":
			exitparcour(player)

on inventory open:
	if player's gamemode is adventure:
		if metadata value "parcour" of player is "ingame":
			cancel event
			message "WÃ¤hrend dem Parkour sind Inventare gespeert."

function parcourcheckpoint(player:player):
	apply potion of resistance of tier 5 to {_player} for 1 second
	set {_checkpoint} to metadata value "checkpoint" of {_player}
	teleport {_player} to {_checkpoint}

function exitparcour(player:player):
	clear {_player}'s inventory
	restoreinventory({_player})
	delete metadata value "parcour" of {_player}
	delete metadata "checkpoint" of {_player}
	delete metadata "runid" of {_player}
	set gamemode of {_player} to survival
			
function healandfeed(player:player):
	heal {_player}
	set {_player}'s food level to 10
			
function saveinventory(player:player):
	set {_num} to 0
	loop 36 times:
		set {_item} to slot {_num} of {_player}'s inventory
		set {TMP::parcour::%{_player}%::%{_num}%} to {_item}
		add 1 to {_num}
	set {TMP::parcour::%{_player}%::helmet} to {_player}'s helmet
	set {TMP::parcour::%{_player}%::chestplate} to {_player}'s chestplate
	set {TMP::parcour::%{_player}%::legging} to {_player}'s legging
	set {TMP::parcour::%{_player}%::boots} to {_player}'s boots
	set {TMP::parcour::%{_player}%::health} to {_player}'s health
	set {TMP::parcour::%{_player}%::hunger} to {_player}'s hunger

on unload:
	loop all players:
		if metadata value "parcour" of loop-player is "ingame":
			message "Parkour wurde entladen, Parkour wurde beendet." to loop-player
			exitparcour(loop-player)


function restoreinventory(player:player):
	set {_num} to 0
	loop 36 times:
		set slot {_num} of {_player}'s inventory to {TMP::parcour::%{_player}%::%{_num}%}
		delete {TMP::parcour::%{_player}%::%{_num}%}
		add 1 to {_num}

	set {_player}'s helmet to {TMP::parcour::%{_player}%::helmet}
	set {_player}'s chestplate to {TMP::parcour::%{_player}%::chestplate}
	set {_player}'s legging to {TMP::parcour::%{_player}%::legging}
	set {_player}'s boots to {TMP::parcour::%{_player}%::boots}
	set {_player}'s health to {TMP::parcour::%{_player}%::health}
	set {_player}'s hunger to {TMP::parcour::%{_player}%::hunger}
	
	delete {TMP::parcour::%{_player}%::helmet}
	delete {TMP::parcour::%{_player}%::chestplate}
	delete {TMP::parcour::%{_player}%::legging}
	delete {TMP::parcour::%{_player}%::boots}
	delete {TMP::parcour::%{_player}%::health}
	delete {TMP::parcour::%{_player}%::hunger}
	delete {TMP::parcour::%{_player}%::*}
	delete {TMP::parcour::%{_player}%}



on inventory open:
	if slot 0 of event-inventory is bedrock:
		if name of slot 0 of event-inventory is "parcour":
			openparcourinventory(event-inventory,player)
			cancel event

on place of hopper:
	set {_blockabove} to block 1 above event-location
	if slot 0 of {_blockabove}'s inventory is bedrock:
		if name of slot 0 of event-inventory is "parcour":
			cancel event

on break of {@pressureplate}:
	set {_blockbelow} to block 1 below event-location
	if slot 0 of {_blockbelow}'s inventory is bedrock:
		cancel event
			

on break of {@parcourblock1}:
	if slot 0 of event-block's inventory is bedrock:
		cancel event
			

command /giveparcour [<player>]:
	permission: is.admin
	trigger:
		set {_parcourid} to UUID.randomUUID()
		getparcourtools(arg-1,3,"%{_parcourid}%")
		
command /checkpoint:
	aliases: /cp
	trigger:
		if metadata value "parcour" of player is "ingame":
			parcourcheckpoint(player)
		
on place of {@parcouritem}:
	set {_value} to getnbtvalue(player's tool,"type")
	if {_value} is "start":
		cancel event
		wait 1 tick
		set {_parcourid} to getnbtvalue(player's tool,"id")
		remove 1 of player's tool from player's inventory
		set {_item1} to 1 of {@parcourblock}
		set {_item2} to {@pressureplate}
		set {_loc} to event-location
		set block at {_loc} to {_item1}
		set {_parcourslot} to 1 of bedrock named "parcour"
		set {_parcourslot} to setnbtvalue({_parcourslot},"creator",uuid of player)
		set {_parcourslot} to setnbtvalue({_parcourslot},"mode","build")
		set {_parcourslot} to setnbtvalue({_parcourslot},"type","start")
		set {_parcourslot} to setnbtvalue({_parcourslot},"id","%{_parcourid}%")
		set slot 0 of block at {_loc} to {_parcourslot}
		add 1 to y-coord of {_loc}
		set block at {_loc} to {_item2}
		stop
	if {_value} is "checkpoint":
		cancel event
		wait 1 tick
		set {_item} to player's tool
		set {_parcourid} to getnbtvalue({_item},"id")
		remove 1 of player's tool from player's inventory
		set {_item1} to 1 of {@parcourblock}
		set {_item2} to {@pressureplate}
		set {_loc} to event-location
		set block at {_loc} to {_item1}
		set {_parcourslot} to 1 of bedrock named "parcour"
		set {_parcourslot} to setnbtvalue({_parcourslot},"type","checkpoint")
		set {_parcourslot} to setnbtvalue({_parcourslot},"id","%{_parcourid}%")
		set slot 0 of block at {_loc} to {_parcourslot}
		add 1 to y-coord of {_loc}
		set block at {_loc} to {_item2}
		message "checkpoint"
	if {_value} is "finish":
		cancel event
		wait 1 tick
		set {_item} to player's tool
		set {_parcourid} to getnbtvalue({_item},"id")
		remove 1 of player's tool from player's inventory
		set {_item1} to 1 of {@parcourblock}
		set {_item2} to {@pressureplate}
		set {_loc} to event-location
		set block at {_loc} to {_item1}
		set {_parcourslot} to 1 of bedrock named "parcour"
		set {_parcourslot} to setnbtvalue({_parcourslot},"type","finish")
		set {_parcourslot} to setnbtvalue({_parcourslot},"id","%{_parcourid}%")
		set slot 0 of block at {_loc} to {_parcourslot}
		add 1 to y-coord of {_loc}
		set block at {_loc} to {_item2}
		message "finish"
		
function openparcourinventory(inventory:inventory,player:player):
	set {_item} to slot 0 of {_inventory}
	set {_type} to getnbtvalue({_item},"type")
	set {_parcourid} to getnbtvalue({_item},"id")
	set {_loc} to {_inventory}.getHolder().getLocation()
	set metadata "targetblock" of {_player} to {_loc}
	opengui({_player},27,"&lParkour")
	if {_type} is "start":
		setguiitem({_player},11,{@menuitemcheckpoint},1,"Checkpoint Plate","test","getparcourtools(""%{_player}%"" parsed as player,1,""%{_parcourid}%"")",false)
		setguiitem({_player},13,{@menuitemfinish},1,"Finish Plate","test","getparcourtools(""%{_player}%"" parsed as player,2,""%{_parcourid}%"")",false)
		setguiitem({_player},15,{@menuitembreak},1,"Remove this parcour block","You get it back as item.","breakparcourblock(""%{_player}%"" parsed as player)",true)
	else if {_type} is "checkpoint":
		setguiitem({_player},13,{@menuitembreak},1,"Remove this parcour block","You get it back as item.","breakparcourblock(""%{_player}%"" parsed as player)",true)

	else if {_type} is "finish":
		setguiitem({_player},13,{@menuitembreak},1,"Remove this parcour block","You get it back as item.","breakparcourblock(""%{_player}%"" parsed as player)",true)


function breakparcourblock(player:player):
	set {_loc} to metadata value "targetblock" of {_player}
	set {_item} to slot 0 of block at {_loc}'s inventory
	set {_type} to getnbtvalue({_item},"type")
	set {_parcourid} to getnbtvalue({_item},"id")
	clear block at {_loc}'s inventory
	set block 1 above {_loc} to air
	set block at {_loc} to air
	if {_type} is "checkpoint":
		set {_type} to 1
	else if {_type} is "finish":
		set {_type} to 2
	else if {_type} is "start":
		set {_type} to 3
	getparcourtools({_player},{_type},{_parcourid})
	

function getparcourtools(player:player,tool:number,parcourid:text):
	if {_tool} is 1:
		set {_item} to 1 of {@parcouritem} named "&rCheckpoint"
		set {_item} to setnbtvalue({_item},"type","checkpoint")
		set {_item} to setnbtvalue({_item},"id",{_parcourid})
		add 1 of {_item} to {_player}'s inventory
	else if {_tool} is 2:
		set {_item} to 1 of {@parcouritem} named "&rFinish"
		set {_item} to setnbtvalue({_item},"type","finish")
		set {_item} to setnbtvalue({_item},"id",{_parcourid})
		add 1 of {_item} to {_player}'s inventory
	else if {_tool} is 3:
		set {_item} to 1 of {@parcouritem} named "&e&lParcour"
		set {_item} to setnbtvalue({_item},"type","start")
		set {_item} to setnbtvalue({_item},"id",{_parcourid})
		add 1 of {_item} to {_player}'s inventory

