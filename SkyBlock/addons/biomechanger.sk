#
# ==============
# biomechanger.sk v0.0.1
# ==============
# Adds biome changing capability to SKYBLOCK.SK
# ==============
# Dependencies
# ==============
# > Spigot 1.13.2 - https://hub.spigotmc.org/jenkins/job/BuildTools/
# > Skript by bensku - https://github.com/SkriptLang/Skript/releases
# ==============
# How to use it:
# ==============
# > Add biomechanger.sk to your "plugins/Skript/scripts" folder and then reload.
# > Use the changebiome(player,"biome") function to change the biome at the island
# > of the player to the defined biome. You can also alter the function to make it
# > work with custom locactions.
# > View all available biomes, look there: https://hub.spigotmc.org/javadocs/spigot/org/bukkit/block/Biome.html
# --------------
# > For tesing purposes: (Island has to be created first)
#command /testbiome:
#	trigger:
#		changebiome(player,"JUNGLE")
# ==============

#
# > Import Java class to get biome changing to work
import:
	org.bukkit.Bukkit
	org.bukkit.World
	org.bukkit.block.Biome

# > Function - changebiome:
# > Arguments:
# > <player>player, <text>biome
# > Actions:
# > Is going to check if WeatherMan (dependency for this function) is installed, then takes the location of 
# > the island of the player and then run a WeatherMan command.
function changebiome(player:offline player,biome:text):
  #
	# > Get the uuid of the player to then get the location of the island
	set {_uuid} to uuid of {_player}
	#
	# > Set {_l::1} and {_l::2} to the location of the island borders.
	set {_l::1} to {SB::player::%{_uuid}%::island::border1}
	set {_l::2} to {SB::player::%{_uuid}%::island::border2}

	#
	# > Since we only need to loop trough one y-coordinate per x- and z-axis, we set the y-coordinate to 0
	# > to prevent looping multiple times trough the same x- and z-axis.
	set {_l::1} to location at x-coord of {_l::1}, 0, z-coord of {_l::1} in world "%world of {_l::1}%" parsed as world
	set {_l::2} to location at x-coord of {_l::2}, 0, z-coord of {_l::2} in world "%world of {_l::2}%" parsed as world
	#
	# > Set {_world} to the defined world in the configuration
	set {_world} to Bukkit.getServer().getWorld("%{SB::config::world}%")
	replace all "_" with " " in {_biome}
	
	#
	# > Set {_changebiome} to the {_biome} parsed as biome, since the function accepts biomes as string (text)
	set {_changebiome} to {_biome} parsed as biome
	
	#
	# > Loop trough all blocks within the two locations
	set {_blocks::*} to blocks within {_l::1} to {_l::2}
	set {_size} to size of {_blocks::*}
	delete {_blocks::*}
	#
	# > Inform player about biome change
	set {_a} to {SB::lang::bc::changing::%{SK::lang::%{_uuid}%}%}
	replace all "<biome>" with "%{_changebiome}%" in {_a}
	send "%{SB::lang::prefix::%{SK::lang::%{_uuid}%}%}% %{SB::lang::bc::changing::%{SK::lang::%{_uuid}%}%}%" to {_player}
	#
	# > A progress bar to show how long it takes until it's done
	set {_needed} to 0
	set {_progress} to "%{SB::config::color::secondary::2}%||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||&r"
	loop blocks within {_l::1} to {_l::2}:
		#if y-coordinate of loop-block is 100.5:
		add 1 to {_i}
		add 1 to {_b}
		if {_i} is 100:
			wait 1 tick
			set {_p} to ({_b}/{_size})*100
			if {_p} >= {_needed}:
				add 1 to {_needed}
				replace all "%{SB::config::color::secondary::2}%|" with "%{SB::config::color::primary::1}%|%{SB::config::color::secondary::2}%" in {_progress}

				execute console command "/title %{_player}% actionbar {""text"":""%{_progress}%""}"
			set {_i} to 0
		set {_x} to (location of loop-block).getBlockX()
		set {_z} to (location of loop-block).getBlockZ()
		{_world}.setBiome({_x}, {_z}, {_changebiome})

	#
	# > Print to the player that we're done with changing the biome
	send "%{SB::lang::prefix::%{SK::lang::%{_uuid}%}%}% %{SB::lang::bc::done::%{SK::lang::%{_uuid}%}%}%" to {_player}
